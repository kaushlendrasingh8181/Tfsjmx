<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Achievement Api" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Pa$$word@123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Student.M Enquiry.M Config.M Withdrawal.M</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">uatphoenix.gemseducation.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">phoenixidentityserver/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://uatphoenix.gemseducation.com/phoenixidentityserver/connect/token</stringProp>
                  <stringProp name="Authorization.username">PostmanClient</stringProp>
                  <stringProp name="Authorization.password">PostmanClient</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                  <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">String Response = prev.getResponseDataAsString();
log.info(&quot;***********&quot; + Response)

${__setProperty(access_token, ${token})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Achievement Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="GetAllAchievementController" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getAllAChievementTestCases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllAchievement(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Achievement</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def acknowledegmentId = response.result.id;
def mySet = acknowledegmentId.toSet();


log.info (&quot;Size of the list &quot; + acknowledegmentId.size() + &quot; ********&quot; +  acknowledegmentId );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (acknowledegmentId.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def incdntType = response.result.incdntType;

for (name in incdntType)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;incdntType is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;incdntType is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CreateAchievement Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateAchievement(Post Request)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &#xd;
  &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${acdId},&#xd;
  &quot;entryDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;incdntDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;incdntType&quot;: &quot;${incdntType}&quot;,&#xd;
  &quot;incdntRemarks&quot;: &quot;${incdntRemarks}&quot;,&#xd;
  &quot;bmSubCategoryId&quot;: ${bmSubCategoryId},&#xd;
  &quot;bmCategoryId&quot;: ${bmCategoryId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Achievement</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/api/Achievement</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

log.info (&quot;response of the list &quot; +   &quot; ********&quot; +  response );

String idNew = response.result.toString();

//Integer  id = response.result;


if (!idNew.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;No Achievement Id is found&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Achievement Id is found&quot;)
AssertionResult.setFailure(true);
}

</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">achievementIdResponse</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
                <stringProp name="Scope.variable">newVariable</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAPIAchievement(200,asssertion on passid,studentid)" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Achievement/${achievementIdResponse}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByAchievement" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer idFromGet             = response.result.id;
String bsuIdResponse          = response.result.bsuId.toString();
Integer acdIdResponse         = response.result.acdId;
String incdntTypeResponse     = response.result.incdntType.toString();


log.info ( &quot; value is&quot; +  idFromGet +&quot;****************************&quot;          + &quot;${achievementIdResponse}&quot;);
log.info ( &quot; value is&quot; +  bsuIdResponse +&quot;****************************&quot;      + &quot;${bsuId}&quot;);
log.info ( &quot; value is&quot; +  acdIdResponse +&quot;****************************&quot;      + &quot;${acdId}&quot;);
log.info ( &quot; value is&quot; +  incdntTypeResponse + &quot;****************************&quot; + &quot;${incdntType}&quot;);

if((idFromGet.equals(Integer.parseInt(&quot;${achievementIdResponse}&quot;)))
&amp;&amp;(bsuIdResponse.equals(&quot;${bsuId}&quot;))
&amp;&amp;(incdntTypeResponse.equals(&quot;${incdntType}&quot;))
&amp;&amp;(acdIdResponse.equals(Integer.parseInt(&quot;${acdId}&quot;))))
{
	AssertionResult.setFailureMessage(&quot; Both Id  are same&quot;);
    	AssertionResult.setFailure(false); 
}

else 
 {
 	AssertionResult.setFailureMessage(&quot; Both Id  are different&quot;);
    	AssertionResult.setFailure(true);
 }
 
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateAchievemntPut Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id&quot; : ${achievementIdResponse},&#xd;
  &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${acdId},&#xd;
  &quot;entryDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;incdntDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;incdntType&quot;: &quot;${incdntTypeUpdate}&quot;,&#xd;
  &quot;incdntRemarks&quot;: &quot;${incdntRemarks}&quot;,&#xd;
  &quot;bmSubCategoryId&quot;: ${bmSubCategoryId},&#xd;
  &quot;bmCategoryId&quot;: ${bmCategoryId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Achievement/${achievementIdResponse}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Validation Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer idFromGetPutResponse     = response.result.id;
String bsuIdPutResponse          = response.result.bsuId.toString();
Integer acdIdPutResponse         = response.result.acdId;
String incdntTypePutResponse     = response.result.incdntType.toString();


log.info ( &quot; id value is&quot; +  idFromGetPutResponse +&quot;****************************&quot;          + &quot;${achievementIdResponse}&quot;);
log.info ( &quot; bsuiD value is&quot; +  bsuIdPutResponse +&quot;****************************&quot;      + &quot;${bsuId}&quot;);
log.info ( &quot; AcdId value is&quot; +  acdIdPutResponse +&quot;****************************&quot;      + &quot;${acdId}&quot;);
log.info ( &quot; Incident type value is&quot; +  incdntTypePutResponse + &quot;****************************&quot; + &quot;${incdntTypePutResponse}&quot;);

if((idFromGetPutResponse.equals(Integer.parseInt(&quot;${achievementIdResponse}&quot;)))
&amp;&amp;(bsuIdPutResponse.equals(&quot;${bsuId}&quot;))
&amp;&amp;(incdntTypePutResponse.equalsIgnoreCase(&quot;${incdntTypePutResponse}&quot;))
&amp;&amp;(acdIdPutResponse.equals(Integer.parseInt(&quot;${acdId}&quot;))))
{
	AssertionResult.setFailureMessage(&quot; Both Id  are same&quot;);
    	AssertionResult.setFailure(false); 
}

else 
 {
 	AssertionResult.setFailureMessage(&quot; Both Id  are different&quot;);
    	AssertionResult.setFailure(true);
 }
 

</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchAchievement Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchAchievementAll(Response and check Full update)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;id&quot; : ${achievementIdResponse},&#xd;
  &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${acdId},&#xd;
  &quot;incdntType&quot;: &quot;${incdntType}&quot;&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Achievement/Search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer idFromSearchAchievement                = response.result[0].id;
String bsuIdResponseSearchAchievement          = response.result[0].bsuId.toString();
Integer acdIdResponseSearchAchievement         = response.result[0].acdId;
String incdntTypeResponseSearchAchievement     = response.result[0].incdntType.toString();


log.info ( &quot; value is&quot; +  idFromSearchAchievement +&quot;****************************&quot;          + &quot;${achievementIdResponse}&quot;);
log.info ( &quot; value is&quot; +  bsuIdResponseSearchAchievement +&quot;****************************&quot;      + &quot;${bsuId}&quot;);
log.info ( &quot; value is&quot; +  acdIdResponseSearchAchievement +&quot;****************************&quot;      + &quot;${acdId}&quot;);
log.info ( &quot; value is&quot; +  incdntTypeResponseSearchAchievement + &quot;****************************&quot; + &quot;${incdntType}&quot;);

if((idFromSearchAchievement.equals(Integer.parseInt(&quot;${achievementIdResponse}&quot;)))
&amp;&amp;(bsuIdResponseSearchAchievement.equals(&quot;${bsuId}&quot;))
&amp;&amp;(incdntTypeResponseSearchAchievement.equals(&quot;${incdntType}&quot;))
&amp;&amp;(acdIdResponseSearchAchievement.equals(Integer.parseInt(&quot;${acdId}&quot;))))
{
	AssertionResult.setFailureMessage(&quot; Both Id  are same&quot;);
    	AssertionResult.setFailure(false); 
}

else 
 {
 	AssertionResult.setFailureMessage(&quot; Both Id  are different&quot;);
    	AssertionResult.setFailure(true);
 }
 
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchAchievementwithoutIncedentType(Response and check Full update)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;id&quot; : ${achievementIdResponse},&#xd;
  &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${acdId}&#xd;
  &#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Achievement/Search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer idFromSearchAchievement                = response.result[0].id;
String bsuIdResponseSearchAchievement          = response.result[0].bsuId.toString();
Integer acdIdResponseSearchAchievement         = response.result[0].acdId;

log.info ( &quot; value is&quot; +  idFromSearchAchievement +&quot;****************************&quot;          + &quot;${achievementIdResponse}&quot;);
log.info ( &quot; value is&quot; +  bsuIdResponseSearchAchievement +&quot;****************************&quot;      + &quot;${bsuId}&quot;);
log.info ( &quot; value is&quot; +  acdIdResponseSearchAchievement +&quot;****************************&quot;      + &quot;${acdId}&quot;);


if((idFromSearchAchievement.equals(Integer.parseInt(&quot;${achievementIdResponse}&quot;)))
&amp;&amp;(bsuIdResponseSearchAchievement.equals(&quot;${bsuId}&quot;))
&amp;&amp;(acdIdResponseSearchAchievement.equals(Integer.parseInt(&quot;${acdId}&quot;))))
{
	AssertionResult.setFailureMessage(&quot; Both Id  are same&quot;);
    	AssertionResult.setFailure(false); 
}

else 
 {
 	AssertionResult.setFailureMessage(&quot; Both Id  are different&quot;);
    	AssertionResult.setFailure(true);
 }
 
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchAchievementonlyacd and bsuid(Response and check Full update)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &#xd;
  &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${acdId}&#xd;
  &#xd;
  &#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Achievement/Search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def idFromSearchAchievementList                = response.result.id;
def mySet = idFromSearchAchievementList.toSet();

log.info (&quot;Size of the list &quot; + idFromSearchAchievementList.size() + &quot; ********&quot; +  idFromSearchAchievementList );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (idFromSearchAchievementList.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}
 
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;


if (id.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;id is Null&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;id is not null&quot;)
AssertionResult.setFailure(false);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Associate/Disassociate/getStudentController" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CreateAchievement Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AssociateAchievement(Post Request)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
&#xd;
{&#xd;
  &quot;id&quot;: ${getStudentByAchievementid}&#xd;
}&#xd;
 &#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Student/Achievement/Associate/${achievementIdResponse}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">/api/Achievement</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAchievementByStudentAfterAssociateController" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAchievementByStudentID Positive cases" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAchievementByStudentID_1(200,asssertion on passid,studentid)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Achievement/${getStudentByAchievementid}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">AchIdCheck</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[?(@.id==&apos;${achievementIdResponse}&apos;)].id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                      <stringProp name="Scope.variable"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentId Assertion " enabled="true">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">String jsonString =  vars.get(&quot;AchIdCheck&quot;);



log.info (&quot;The Validate Id present or not &quot; + jsonString);	

	if (!jsonString.equals(&apos;${achievementIdResponse}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Achievement Id is not present&quot;);
	    	AssertionResult.setFailure(true); 
	}

    else 

    {
    		AssertionResult.setFailure(false);
    }

</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223Assertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="De-AssociateAchievement(Post Request)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${getStudentByAchievementid}&#xd;
}&#xd;
 &#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Student/Achievement/DeAssociate/${achievementIdResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">/api/Achievement</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAchievementByStudentIDAfterDisassociate Positive cases" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAchievementByStudentID(200,asssertion on passid,studentid)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Achievement/${getStudentByAchievementid}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">AchIdCheck</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[?(@.id==&apos;${achievementIdResponse}&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                    <stringProp name="Scope.variable"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentId Assertion " enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">String jsonString =  vars.get(&quot;AchIdCheck&quot;);



log.info (&quot;The Validate Id present or not &quot; + jsonString);	

	if (!jsonString.equals(&apos;${achievementIdResponse}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Achievement Id is not present&quot;);
	    	AssertionResult.setFailure(true); 
	}

    else 

    {
    		AssertionResult.setFailure(false);
    }

</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Achievement Csv Data Set" enabled="true">
            <stringProp name="filename">${CONFIG_PATH}/csv_sheet/Achievement/Achievement.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">bsuId,acdId,incdntType,incdntRemarks,bmSubCategoryId,bmCategoryId,incdntTypeUpdate,getStudentByAchievementid</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Parent Api" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Pa$$word@123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Student.M Enquiry.M Config.M Withdrawal.M</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">uatphoenix.gemseducation.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">phoenixidentityserver/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://uatphoenix.gemseducation.com/phoenixidentityserver/connect/token</stringProp>
                  <stringProp name="Authorization.username">PostmanClient</stringProp>
                  <stringProp name="Authorization.password">PostmanClient</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                  <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">String Response = prev.getResponseDataAsString();
log.info(&quot;***********&quot; + Response)

${__setProperty(access_token, ${token})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Parent Controller" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ParentStudentId Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put APi(Response and check Full update)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;stuId&quot;: &quot;${getStudentById}&quot;,&#xd;
&quot;ffirstname&quot; : &quot;${ffirstname}&quot;,&#xd;
&quot;flastname&quot; : &quot;${flastname}&quot;,&#xd;
&quot;fnationality&quot; : &quot;${fnationality}&quot;,&#xd;
&quot;BFgemsemp&quot;: ${bFgemsemp},&#xd;
&quot;BMgemsemp&quot;:${bMgemsemp}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Parent/Student/122</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeSection" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();


log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeSectionValidation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String stuIdResponse = response.result.stuId.toString();
String ffirstnameResponse = response.result.ffirstname.toString();
String flastnameResponse = response.result.flastname.toString();
String fnationalityResponse = response.result.fnationality.toString();
Boolean BfgemsempResponse = response.result.bFgemsemp;
Boolean BmgemsempResponse = response.result.bMgemsemp;



log.info (&quot;Stuid &quot;               + stuIdResponse  + &quot; ********CSV ***&quot; + &quot;${getStudentById}&quot;);
log.info (&quot;ffirstnameResponse &quot;   + ffirstnameResponse      + &quot; ********CSV ***&quot; + &quot;${ffirstname}&quot;);
log.info (&quot;flastnameResponse &quot;   + flastnameResponse      + &quot; ********CSV ***&quot; + &quot;${flastname}&quot;);
log.info (&quot;fnationalityResponse &quot;     + fnationalityResponse        + &quot; ********CSV ***&quot; + &quot;${fnationality}&quot;);
log.info (&quot;BfgemsempResponse &quot;      + BfgemsempResponse         + &quot; ********CSV ***&quot; + &quot;${bFgemsemp}&quot;);
log.info (&quot;BmgemsempResponse &quot;       + BmgemsempResponse          + &quot; ********CSV ***&quot; + &quot;${bMgemsemp}&quot;);


if ((stuIdResponse.equals(&quot;${getStudentById}&quot;))
&amp;&amp; (ffirstnameResponse.equals(&quot;${ffirstname}&quot;))
&amp;&amp; (flastnameResponse.equals(&quot;${flastname}&quot;))
&amp;&amp; (fnationalityResponse.equals(&quot;${fnationality}&quot;))
&amp;&amp; (BfgemsempResponse==${bFgemsemp})
&amp;&amp; (BmgemsempResponse==${bMgemsemp}))

{
	AssertionResult.setFailureMessage(&quot;Parent Student Updated Successfully&quot;);
    	AssertionResult.setFailure(false); 
}



else
{
	AssertionResult.setFailureMessage(&quot; Failed in updation &quot;);
AssertionResult.setFailure(true);
}


</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="GetParentByID" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetparentByID Positive cases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetParentByID(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Parent/${getStudentById}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentId Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentId&quot;);
//String studentId =  vars.get(&quot;EqmEnqid&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${getStudentById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Null Check Assertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String bsuId = response.result.bsuId.toString();
String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;The OverAll API Response &quot; + response);
//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if(bsuId==null || bsuId.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(acdId==null || acdId.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetparentByID not present" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetParentByID(code and message check)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/1234567</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Response Code Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;responseCode&quot;);



log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;failure&apos;)){
		AssertionResult.setFailureMessage(&quot;Assertion is wrong ID exists&quot;);
	    	AssertionResult.setFailure(true); 
	}

   </stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="GetParentNegativeTestCases" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="parent negative case " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/${studentById}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51508">400</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;failure&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="csvDataSetforNegativeCases" enabled="true">
                  <stringProp name="filename">${CONFIG_PATH}/csv_sheet/Student/StudentByIDNegativeCases.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">studentById</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Parent Csv Data Set" enabled="true">
            <stringProp name="filename">${CONFIG_PATH}/csv_sheet/Parent/Parent.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">getStudentById,ffirstname,flastname,fnationality,bFgemsemp,bMgemsemp  </stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Student API" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Pa$$word@123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Student.M Enquiry.M Config.M Withdrawal.M</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">uatphoenix.gemseducation.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">phoenixidentityserver/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://uatphoenix.gemseducation.com/phoenixidentityserver/connect/token</stringProp>
                  <stringProp name="Authorization.username">PostmanClient</stringProp>
                  <stringProp name="Authorization.password">PostmanClient</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                  <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">String Response = prev.getResponseDataAsString();
log.info(&quot;***********&quot; + Response)

${__setProperty(access_token, ${token})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Student Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="GetStudentByIDController" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetStudentByID Positive cases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetStudentByID(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/${getStudentById}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentId Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentId&quot;);
//String studentId =  vars.get(&quot;EqmEnqid&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${getStudentById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Null Check Assertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String bsuId = response.result.bsuId.toString();
String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;The OverAll API Response &quot; + response);
//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if(bsuId==null || bsuId.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(acdId==null || acdId.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetStudentByID not present" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetStudentByID(code and message check)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/1234567</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Response Code Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;responseCode&quot;);



log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;failure&apos;)){
		AssertionResult.setFailureMessage(&quot;Assertion is wrong ID exists&quot;);
	    	AssertionResult.setFailure(true); 
	}

   </stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="GetStudentNegativeTestCases" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StudentById negative case " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/${studentById}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51508">400</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="csvDataSetforNegativeCases" enabled="true">
                  <stringProp name="filename">${CONFIG_PATH}/csv_sheet/Student/StudentByIDNegativeCases.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">studentById</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;failure&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="FetchStudentAllController" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAllStudent Positive cases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllStudent(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/All</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="GetAllStudent NegativeTestCases" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StudentAll negative case " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/${studentAll}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51508">400</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">statusID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;statusID&quot;);
String studentId =  vars.get(&quot;studentID&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;400&apos;)){
		AssertionResult.setFailureMessage(&quot;Nagative validation Fail&quot;);
	    	AssertionResult.setFailure(true); 
	}


	
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="csvDataSetforNegativeCases" enabled="true">
                  <stringProp name="filename">${CONFIG_PATH}/csv_sheet/Student/StudentAllNegativeCases.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">studentAll</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SearchStudent Controller" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SearchPositiveController" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByStudentNumber(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;studentNumber&quot;: &quot;${studentNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByStudentName(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;firstName&quot;: &quot;${firstName}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="71346910">Javed</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentName" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def firstName = response.result.firstName;

for (name in firstName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByCurrentStatus(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;status&quot;: &quot;${currentStatus}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByCurrentStatus" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}



</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentBySectionId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;sectionId&quot;: ${sectionId}&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionBySectionId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def sectionId = response.result.sectionId;

for (id in sectionId)
{ 
	log.info( &quot; Id  is &quot; + id);
if (!id.equals(Integer.parseInt(&apos;${sectionId}&apos;)))
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(false);
}
}
 
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByAcademicyear(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;acdId&quot;: ${acdId}&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByAcademicYear" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def academicYearId = response.result.acdId;

for (id in academicYearId)
{ 
	log.info( &quot; Id  is &quot; + id);
	log.info( &quot; csv is &quot; + &apos;${acdId}&apos;);
if (!id.equals(Integer.parseInt(&quot;${acdId}&quot;)))
{
	
	
	AssertionResult.setFailureMessage(&quot;id is same&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;id is not same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentBySchoolId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;schoolId&quot;: &quot;${schoolId}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionBySchoolId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def schoolId = response.result.schoolId;

for (id in schoolId)
{ 
	log.info( &quot; Id  is &quot; + id);
if (!id.equals(Integer.parseInt(&apos;${schoolId}&apos;)))
{
	AssertionResult.setFailureMessage(&quot;School id is Different&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;School id is Same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByEmergencyContact(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;emergencyContact&quot;: &quot;${emergencyContact}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByemergencyContact" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def id = response.result.id;
def emergencyContact = response.result.emergencyContact;

csvId = &apos;${emergencyContact}&apos;;
//csvId = 123;
//def a=[&apos;1234567&apos;,&apos;+91-123456&apos;,&apos;+90 23&apos;];
//b=123
for (number in emergencyContact)
{
	if (number.contains(csvId.toString()))
	{
		AssertionResult.setFailureMessage(&quot;Emergency contact is presesnt&quot;);
    	AssertionResult.setFailure(false)
	}

	else
	{
		//log.info ( &quot;id of failed one is &quot; + ids); 
		AssertionResult.setFailure(true)
		
	}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByemergencyContact" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}



if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByPassportNumber(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;pasprtNo&quot;: &quot;${pasprtNo}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByPassportNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def passPortNumber = response.result.pasprtNo;

for (id in passPortNumber)
{ 
	log.info( &quot; Id  is &quot; + id);
if (!id.equals(Integer.parseInt(&apos;${pasprtNo}&apos;)))
{
	AssertionResult.setFailureMessage(&quot;PassPort id is Different&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;PassPort id is Same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByPassportNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByFeeId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;feeId&quot;: &quot;${feeId}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByFeeId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationOnFeeId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">feeId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..feeId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationOnFeeId Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;feeId&quot;);


log.info (&quot;The FeeId is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${feeId}&apos;)){
		AssertionResult.setFailureMessage(&quot;The FeeId is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByStreamId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;streamId&quot;: ${streamId}&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStreamId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def streamId = response.result.streamId;

for (id in streamId)
{ 
	log.info( &quot; Id  is &quot; + id);
if (!id.equals(Integer.parseInt(&apos;${streamId}&apos;)))
{
	AssertionResult.setFailureMessage(&quot;Stream id is Different&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Stream id is Same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStreamId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByDateOfJoining(Response and check Full update)" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;doj&quot;: &quot;${doj}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByDateOfJoining" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
mport java.util.Date
import java.text.SimpleDateFormat;

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def dateOfJoining = response.result.doj;
def pattern = &quot;yyyy-MM-dd hh:mm:ss&quot;;
def dateNew = new SimpleDateFormat(pattern).parse(dateOfJoining);	

String dateCsv = new SimpleDateFormat(pattern).parse(&apos;${doj}&apos;)	;

for (date in dateNew)
{ 
	log.info( &quot; date  is &quot; + date);
     	if (date&lt;=dateCsv)
{
	log.info(&quot;date is &quot; + dateNew);
	log.info(&quot;CSV date is &quot; + dateCsv);
	AssertionResult.setFailureMessage(&quot;PassPort id is Different&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	log.info(&quot;date is &quot; + dateNew);
		log.info(&quot;CSV date is &quot; + dateCsv);
	AssertionResult.setFailureMessage(&quot;PassPort id is Same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByDateOfJoining" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByGradeId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;gradeId&quot;: &quot;${gradeId}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByGradeId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def gradeId = response.result.gradeId;

for (id in gradeId)
{ 
	log.info( &quot; Id  is &quot; + id);
if (!id.equals(Integer.parseInt(&apos;${gradeId}&apos;)))
{
	AssertionResult.setFailureMessage(&quot;Grade id is Different&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Grade id is Same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByGradeId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 
if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByMobileNumber(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;mobile&quot;: &quot;${mobile}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByMobileNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def id = response.result.id;
def mobileNumber = response.result.mobile;

csvId = &apos;${mobile}&apos;;
for (number in mobileNumber)
{
	if (number.contains(csvId.toString()))
	{
		AssertionResult.setFailureMessage(&quot;Phone number is presesnt&quot;);
    	AssertionResult.setFailure(false)
	}

	else
	{
		log.info ( &quot;id of failed one is &quot; + id); 
		AssertionResult.setFailure(true)
		
	}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByMobileNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByEmailId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;email&quot;: &quot;${email}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByEmailId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def emailFetch = response.result.email;

for (mailNew in emailFetch)
{ 
	log.info( &quot; mail  is &quot; + mailNew);
if (!mailNew.equals(&apos;${mail}&apos;))
{
	AssertionResult.setFailureMessage(&quot;email is Different&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
	AssertionResult.setFailureMessage(&quot;email is Same&quot;)
AssertionResult.setFailure(false);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByEmailId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def emailNew = response.result.mail;

for (m in emailNew)
{ 
	log.info( &quot; name  is &quot; + m);
if (!m.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByStudentId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;students&quot;: [121,122] &#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="CheckSize" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (studentNumber.size()==2)
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentBySiblingId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;siblingId&quot;: ${siblingId}&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionBySiblingId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionBySiblingId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByLeaveDate(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;leaveDate&quot;: &quot;${leaveDate}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByLeaveDate" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByLeaveDate" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudent(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;studentNumber&quot;: &quot;${studentNumber}&quot;,&#xd;
	&quot;leaveDate&quot;: &quot;${leaveDate}&quot;,&#xd;
	&quot;firstName&quot;: &quot;${firstName}&quot;,&#xd;
	&quot;status&quot;: &quot;${currentStatus}&quot;,&#xd;
	&quot;sectionId&quot;: &quot;${sectionId}&quot;,&#xd;
	&quot;acdId&quot;: &quot;${acdId}&quot;,&#xd;
	&quot;schoolId&quot;: &quot;${schoolId}&quot;,&#xd;
	&#xd;
	&#xd;
	&#xd;
	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateStudent" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Different Screens in Student" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangeSection Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ChangeSection(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
&#xd;
&quot;bsuId&quot; : &quot;${bsuId}&quot;,&#xd;
&quot;sectionId&quot;:${sectionId}&#xd;
&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangebsuIDSection" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String bsuId = response.result.bsuId.toString();
log.info (&quot;BSUID is &quot; + bsuId + &quot; ********&quot;   );

if (bsuId.equals(&quot;${bsuId}&quot;))
{
	AssertionResult.setFailureMessage(&quot;BsuId Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeSectionIdValidation" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String sectionId = response.result.sectionId.toString();
log.info (&quot;SectionID is &quot; + sectionId + &quot; ********&quot;   );

if (sectionId.equals(&quot;${sectionId}&quot;))
{
	AssertionResult.setFailureMessage(&quot;SectionID Changed successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangeLanguage Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ChangeLanguageOfStudent(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
&quot;langId&quot; : &quot;${langId}&quot;&#xd;
&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeLanguageOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String langId = response.result.langId.toString();
log.info (&quot;Language is &quot; + langId + &quot; ********&quot;   );

if (langId.equals(&quot;${langId}&quot;))
{
	AssertionResult.setFailureMessage(&quot;langId Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;langId Failed&quot;);
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangeSibling Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ChangeSiblingOfStudent(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
&quot;siblingId&quot;: &quot;${siblingId}&quot;,&#xd;
&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/${getStudentById}</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeSiblingOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer siblingId = response.result.siblingId;
log.info (&quot;Sibling is &quot; + siblingId + &quot; ********&quot;   );

if (siblingId.equals(Integer.parseInt(&quot;${siblingId}&quot;)))
{
	AssertionResult.setFailureMessage(&quot;Sibling Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
    	if (siblingId.equals(Integer.parseInt(&quot;${getStudentById}&quot;)))
    	{
    		AssertionResult.setFailureMessage(&quot;SiblingId delink successfully&quot;);
    	}
    	else
    	{
    		AssertionResult.setFailureMessage(&quot;SiblingId link successfully&quot;);
    	}
}
else
{
	AssertionResult.setFailureMessage(&quot;Sibling Failed&quot;);
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CancelAdmissionStudent Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CancelAdmissionOfStudent(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
      &quot;currentStatus&quot;:&quot;${currentStatus}&quot;,&#xd;
      &quot;cancelTrandate&quot;:&quot;${Today}&quot;,&#xd;
      &quot;remarks&quot;:&quot;Updated&quot;&#xd;
}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="CancelAdmissionOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String currentStatus = response.result.currentStatus.toString();
log.info (&quot;CurrentStatus &quot; + currentStatus + &quot; ********&quot;   );

if (currentStatus.equals(&quot;${currentStatus}&quot;))
{
	AssertionResult.setFailureMessage(&quot;CurrentStatus Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;CurrentStatus Changed Failed&quot;);
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CancelAdmissionNegativeStudent(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
      &quot;currentStatus&quot;:&quot;EN&quot;,&#xd;
      &quot;remarks&quot;:&quot;Changed Status&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ReverseCancelAdmission Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CancelAdmissionOfStudentReverse(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
      &quot;currentStatus&quot;:&quot;EN&quot;,&#xd;
      &quot;cancelTrandate&quot;:&quot;${Today}&quot;,&#xd;
      &quot;remarks&quot;:&quot;Changed Status&quot;&#xd;
}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="CancelAdmissionOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String currentStatus = response.result.currentStatus.toString();
log.info (&quot;CurrentStatus &quot; + currentStatus + &quot; ********&quot;   );

if (currentStatus.equals(&quot;EN&quot;))
{
	AssertionResult.setFailureMessage(&quot;Status Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Status Changed Failed&quot;);
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangeObserverStuden Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ChangeObserverOfStudent(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
&quot;minListType&quot; : &quot;${minListType}&quot;&#xd;
&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeObserverOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String minListType = response.result.minListType.toString();
log.info (&quot;ListType &quot; + minListType + &quot; ********&quot;   );

if (minListType.equals(&quot;${minListType}&quot;))
{
	AssertionResult.setFailureMessage(&quot;minListType Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;minListType Failed&quot;);
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateStudent Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put APi(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;firstName&quot; :&quot;${firstName}&quot;,&#xd;
&quot;dob&quot; : &quot;${dob}&quot;,&#xd;
&quot;siblingId&quot;: ${siblingId},&#xd;
&quot;houseId&quot; : ${houseId},&#xd;
&quot;nationality&quot; : &quot;${nationality}&quot;,&#xd;
&quot;gender&quot; : &quot;${gender}&quot;,&#xd;
&quot;emergencyContact&quot; : &quot;${emergencyContact}&quot;,&#xd;
&quot;primaryContact&quot; : &quot;${primaryContact}&quot;,&#xd;
&quot;currentStatus&quot; : &quot;${currentStatus}&quot;,&#xd;
&quot;bsuId&quot; : &quot;${bsuId}&quot;,&#xd;
&quot;doj&quot; : &quot;${doj}&quot;,&#xd;
&quot;isActive&quot; :${isActive},&#xd;
&quot;acdId&quot; : ${acdId},&#xd;
&quot;gradeId&quot; : &quot;${gradeId}&quot;,&#xd;
&quot;streamId&quot; : ${streamId},&#xd;
&quot;regnDate&quot; : &quot;${regnDate}&quot;,&#xd;
&quot;eqmEnqid&quot; : ${eqmEnqid},&#xd;
&quot;minDOJ&quot; : &quot;${minDOJ}&quot;,&#xd;
&quot;acdIdJoin&quot; : &quot;${acdIdJoin}&quot;,&#xd;
&quot;gradeIdJoin&quot; : &quot;${gradeIdJoin}&quot;,&#xd;
&quot;rlgId&quot; : &quot;${rlgId}&quot;,&#xd;
&quot;pob&quot; : &quot;${pob}&quot;,&#xd;
&quot;minlist&quot; : &quot;${minlist}&quot;,&#xd;
&quot;feeSponsor&quot; : &quot;${feeSponsor}&quot;,&#xd;
&quot;isRcvspMedication&quot; : ${isRcvspMedication},&#xd;
&quot;isRcvsms&quot;: ${IsRcvsms},&#xd;
&quot;isRcvmail&quot;: ${IsRcvmail},&#xd;
&quot;isPromoted&quot;: ${IsPromoted},&#xd;
&quot;resigndate&quot; : &quot;${resigndate}&quot;,&#xd;
&quot;isClearance&quot;: ${IsClearance},&#xd;
&quot;sectionId&quot;:${sectionId}&#xd;
&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeSection" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();


log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeSectionValidation" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String currentStatusResponse = response.result.currentStatus.toString();
String firstNameResponse = response.result.firstName.toString();
Integer siblingIdResponse = response.result.siblingId;
Integer houseIdResponse = response.result.houseId;
String nationalityResponse = response.result.nationality.toString();
String genderResponse = response.result.gender.toString();
String bsuIdResponse = response.result.bsuId.toString();
Boolean isActiveResponse = response.result.isActive;
Integer acdIdResponse = response.result.acdId;
String gradeIdResponse = response.result.gradeId.toString(); 
Integer streamIdResponse = response.result.streamId;
Integer eqmEnqidResponse = response.result.eqmEnqid;
String acdIdJoinResponse = response.result.acdIdJoin.toString();
String gradeIdJoinResponse = response.result.gradeIdJoin.toString();
String rlgIdResponse = response.result.rlgId.toString();
String pobResponse = response.result.pob.toString();
String minlistResponse = response.result.minlist.toString();
String feeSponsorResponse = response.result.feeSponsor.toString();
Boolean isRcvspMedicationResponse = response.result.isRcvspMedication;
Boolean isRcvsmsResponse = response.result.isRcvsms;
Boolean isRcvmailResponse = response.result.isRcvmail;
Boolean isPromotedResponse = response.result.isPromoted;
Boolean isClearanceResponse = response.result.isClearance;
Integer sectionIdResponse = response.result.sectionId;

log.info (&quot;CurrentStatus &quot;       + currentStatusResponse  + &quot; ********CSV ***&quot; + &quot;${currentStatus}&quot;);
log.info (&quot;firstNameResponse &quot;   + firstNameResponse      + &quot; ********CSV ***&quot; + &quot;${firstName}&quot;);
log.info (&quot;siblingIdResponse &quot;   + siblingIdResponse      + &quot; ********CSV ***&quot; + &quot;${siblingId}&quot;);
log.info (&quot;houseIdResponse &quot;     + houseIdResponse        + &quot; ********CSV ***&quot; + &quot;${houseId}&quot;);
log.info (&quot;nationalityResponse &quot; + nationalityResponse    + &quot; ********CSV ***&quot; + &quot;${nationality}&quot;);
log.info (&quot;genderResponse &quot;      + genderResponse         + &quot; ********CSV ***&quot; + &quot;${gender}&quot;);
log.info (&quot;bsuIdResponse &quot;       + bsuIdResponse          + &quot; ********CSV ***&quot; + &quot;${bsuId}&quot;);
log.info (&quot;isActiveResponse &quot;    + isActiveResponse       + &quot; ********CSV ***&quot; + &quot;${isActive}&quot;);
log.info (&quot;acdIdResponse &quot;       + acdIdResponse          + &quot; ********CSV ***&quot; + &quot;${acdId}&quot;);
log.info (&quot;gradeIdResponse &quot;     + gradeIdResponse        + &quot; ********CSV ***&quot; + &quot;${gradeId}&quot;);
log.info (&quot;streamIdResponse &quot;    + streamIdResponse       + &quot; ********CSV ***&quot; + &quot;${streamId}&quot;);
log.info (&quot;eqmEnqidResponse &quot;    + eqmEnqidResponse       + &quot; ********CSV ***&quot; + &quot;${eqmEnqid}&quot;);
log.info (&quot;acdIdJoinResponse &quot;   + acdIdJoinResponse      + &quot; ********CSV ***&quot; + &quot;${acdIdJoin}&quot;);
log.info (&quot;gradeIdJoinResponse &quot; + gradeIdJoinResponse    + &quot; ********CSV*** &quot; + &quot;${gradeIdJoin}&quot;  );
log.info (&quot;rlgIdResponse &quot;       + rlgIdResponse          + &quot; ********CSV ***&quot; + &quot;${rlgId}&quot;);
log.info (&quot;pobResponse &quot;         + pobResponse            + &quot; ********CSV ***&quot; + &quot;${pob}&quot;);
log.info (&quot;minlistResponse &quot;     + minlistResponse        + &quot; ********CSV ***&quot; + &quot;${minlist}&quot;);
log.info (&quot;feeSponsorResponse &quot;  + feeSponsorResponse     + &quot; ********CSV ***&quot; + &quot;${feeSponsor}&quot;);
log.info (&quot;isRcvspMedicationResponse &quot;+isRcvspMedicationResponse+&quot;********CSV ***&quot; + &quot;${isRcvspMedication}&quot;);
log.info (&quot;isRcvsmsResponse &quot;    + isRcvsmsResponse       + &quot; ********CSV ***&quot; + &quot;${IsRcvsms}&quot;);
log.info (&quot;isRcvmailResponse &quot;   + isRcvmailResponse      + &quot; ********CSV ***&quot; + &quot;${IsRcvmail}&quot;);
log.info (&quot;isPromotedResponse &quot;  + isPromotedResponse     + &quot; ********CSV ***&quot; + &quot;${IsPromoted}&quot; );
log.info (&quot;isClearanceResponse &quot; + isClearanceResponse    + &quot; ********CSV ***&quot; + &quot;${IsClearance}&quot;);
log.info (&quot;sectionIdResponse &quot;   + sectionIdResponse      + &quot; ********CSV ***&quot; + &quot;${sectionId}&quot;);


if ((currentStatusResponse.equals(&quot;${currentStatus}&quot;))
&amp;&amp; (firstNameResponse.equals(&quot;${firstName}&quot;))
&amp;&amp; (siblingIdResponse.equals(Integer.parseInt(&quot;${siblingId}&quot;))) 
&amp;&amp; (houseIdResponse.equals(Integer.parseInt(&quot;${houseId}&quot;)))
&amp;&amp; (nationalityResponse.equals(&quot;${nationality}&quot;))
&amp;&amp; (genderResponse.equals(&quot;${gender}&quot;))
&amp;&amp; (bsuIdResponse.equals(&quot;${bsuId}&quot;))
&amp;&amp; (acdIdResponse.equals(Integer.parseInt(&quot;${acdId}&quot;)))
&amp;&amp; (gradeIdResponse.equals(&quot;${gradeId}&quot;))
&amp;&amp; (streamIdResponse.equals(Integer.parseInt(&quot;${streamId}&quot;)))
&amp;&amp; (eqmEnqidResponse.equals(Integer.parseInt(&quot;${eqmEnqid}&quot;)))
&amp;&amp; (acdIdJoinResponse.equals(&quot;${acdIdJoin}&quot;))
&amp;&amp; (gradeIdJoinResponse.equals(&quot;${gradeIdJoin}&quot;))
&amp;&amp; (rlgIdResponse.equals(&quot;${rlgId}&quot;))
&amp;&amp; (pobResponse.equals(&quot;${pob}&quot;))
&amp;&amp; (minlistResponse.equals(&quot;${minlist}&quot;))
&amp;&amp; (feeSponsorResponse.equals(&quot;${feeSponsor}&quot;))
&amp;&amp; (sectionIdResponse.equals(Integer.parseInt(&quot;${sectionId}&quot;)))
&amp;&amp; (isActiveResponse==${isActive})
&amp;&amp; (isRcvspMedicationResponse==${isRcvspMedication})
&amp;&amp; (isRcvsmsResponse==${IsRcvsms})
&amp;&amp; (isRcvmailResponse==${IsRcvmail})
&amp;&amp; (isPromotedResponse==${IsPromoted})
&amp;&amp; (isClearanceResponse==${IsClearance})
&amp;&amp; (sectionIdResponse.equals(Integer.parseInt(&quot;${sectionId}&quot;))) )
{
	AssertionResult.setFailureMessage(&quot;Student Update Successfully&quot;);
    	AssertionResult.setFailure(false); 
}



else
{
	AssertionResult.setFailureMessage(&quot; Failed in updation &quot;);
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 

</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetStudentByID(200,asssertion on passid,studentid)" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/${getStudentById}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">studentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                    <stringProp name="Scope.variable"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentId Assertion " enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">String jsonString =  vars.get(&quot;studentId&quot;);
//String studentId =  vars.get(&quot;EqmEnqid&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${getStudentById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Null Check Assertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String bsuId = response.result.bsuId.toString();
String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;The OverAll API Response &quot; + response);
//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if(bsuId==null || bsuId.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(acdId==null || acdId.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangeHouse Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ChangeHouseOfStudent(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
&quot;houseId&quot; : ${houseId},&#xd;
&#xd;
&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/122</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeHouseOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String houseId = response.result.houseId.toString();
log.info (&quot;House is &quot; + houseId + &quot; ********&quot;   );

if (houseId.equals(&quot;${houseId}&quot;))
{
	AssertionResult.setFailureMessage(&quot;houseId Changed Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;

for (nb in studentNumber)
{ 
	log.info( &quot; StudentNumber  is &quot; + nb);
if (!nb.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Number is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HealthStatus Controller" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HealthStatusSearch Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByStudentId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;id&quot;: ${getStudentById}&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();


log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}



if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByStudentNumber(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;studentNumber&quot;: &quot;${studentNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByFirstName(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;firstName&quot;: &quot;${firstName}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentBystatus(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;status&quot;: &quot;${status}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentBysectionIdr(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;sectionId&quot;: ${sectionId}&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByacdId (Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;acdId&quot;: &quot;${acdId}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByschoolId(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;schoolId&quot;: &quot;${schoolId}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchStudentByALL(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;id&quot;: ${getStudentById},&#xd;
	&quot;studentNumber&quot;: &quot;${studentNumber}&quot;,&#xd;
	&quot;firstName&quot;: &quot;${firstName}&quot;,&#xd;
	&quot;status&quot;: &quot;${status}&quot;,&#xd;
	&quot;sectionId&quot;: ${sectionId},&#xd;
	&quot;acdId&quot;: &quot;${acdId}&quot;,&#xd;
	&quot;schoolId&quot;: &quot;${schoolId}&quot;&#xd;
	&#xd;
	&#xd;
	&#xd;
	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumberifmultiple" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def number = response.result.studentNumber;

def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

log.info(&quot;************************&quot; + studentNumber);
if (studentNumber.size()==mySet.size()))
{
	AssertionResult.setFailureMessage(&quot;Student Number is same as given&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Student Number is not same as given&quot;);
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationonStudentNumber" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..studentNumber</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentNumber Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;studentNumber&quot;);


log.info (&quot;The StudentNumber is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${studentNumber}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="InsertNewhealthRecordFor Student Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsertHealthStatusStudentwithAllparams(Response and check Full update)" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;id&quot;: ${getStudentById},&#xd;
	&quot;stuId&quot;: ${studentId},&#xd;
	&quot;acdId&quot;: ${acdId},&#xd;
	&quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
	&quot;fathername&quot;: &quot;${fatherName}&quot;,&#xd;
	&quot;mothername&quot;: &quot;${motherName}&quot;,&#xd;
	&quot;rollno&quot;: &quot;${studentNumber}&quot;,&#xd;
	&quot;regno&quot; : &quot;${regNo}&quot;,&#xd;
	&quot;height&quot;: &quot;${height}&quot;,&#xd;
	&quot;weight&quot;: &quot;${weight}&quot;,&#xd;
     &quot;bloodgroup&quot;: &quot;${bloodGroup}&quot;,&#xd;
  	&quot;visionL&quot;: &quot;${visionL}&quot;,&#xd;
 	&quot;visionR&quot;: &quot;${visionR}&quot;,&#xd;
 	&quot;dental&quot;: &quot;${dental}&quot;&#xd;
	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/${studentId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer idFromHealthStatus                = response.result.id;
Integer stuIdFromHealthStatus             = response.result.stuId;
Integer acdIdResponseFromHealthStatus     = response.result.acdId;
String grdIdResponseFromHealthStatus     = response.result.grdId.toString();
log.info ( &quot; value gradeid is&quot; +  grdIdResponseFromHealthStatus)

String  fatherNameResponseFromHealthStatus= response.result.fathername.toString();
String  motherNameResponseFromHealthStatus= response.result.mothername.toString();
String  rollnoResponseFromHealthStatus= response.result.rollno.toString();
String  regnoResponseFromHealthStatus= response.result.regno.toString();
String  heightResponseFromHealthStatus= response.result.height.toString();
String  weightResponseFromHealthStatus= response.result.weight.toString();
String  bloodgroupResponseFromHealthStatus= response.result.bloodgroup.toString();
String  visionLResponseFromHealthStatus= response.result.visionL.toString();
String  visionRResponseFromHealthStatus= response.result.visionR.toString();
String  dentalResponseFromHealthStatus= response.result.dental.toString();
 

log.info ( &quot; value is&quot; +  idFromHealthStatus +&quot;****************************&quot;          + &quot;${getStudentById}&quot;);
log.info ( &quot; value is&quot; +  stuIdFromHealthStatus +&quot;****************************&quot;      + &quot;${studentId}&quot;);
log.info ( &quot; value is&quot; +  acdIdResponseFromHealthStatus +&quot;****************************&quot;      + &quot;${acdId}&quot;);
log.info ( &quot; value is&quot; +  grdIdResponseFromHealthStatus + &quot;****************************&quot; + &quot;${gradeId}&quot;);
log.info ( &quot; value is&quot; +  fatherNameResponseFromHealthStatus + &quot;****************************&quot; + &quot;${fatherName}&quot;);
log.info ( &quot; value is&quot; +  motherNameResponseFromHealthStatus + &quot;****************************&quot; + &quot;${motherName}&quot;);
log.info ( &quot; value is&quot; +  rollnoResponseFromHealthStatus + &quot;****************************&quot; + &quot;${studentNumber}&quot;);
log.info ( &quot; value is&quot; +  regnoResponseFromHealthStatus + &quot;****************************&quot; + &quot;${regNo}&quot;);
log.info ( &quot; value is&quot; +  heightResponseFromHealthStatus + &quot;****************************&quot; + &quot;${height}&quot;);
log.info ( &quot; value is&quot; +  weightResponseFromHealthStatus + &quot;****************************&quot; + &quot;${weight}&quot;);
log.info ( &quot; value is&quot; +  bloodgroupResponseFromHealthStatus + &quot;****************************&quot; + &quot;${bloodGroup}&quot;);
log.info ( &quot; value is&quot; +  visionLResponseFromHealthStatus + &quot;****************************&quot; + &quot;${visionL}&quot;);
log.info ( &quot; value is&quot; +  visionRResponseFromHealthStatus + &quot;****************************&quot; + &quot;${visionR}&quot;);
log.info ( &quot; value is&quot; +  dentalResponseFromHealthStatus + &quot;****************************&quot; + &quot;${dental}&quot;);
//*************************************************************


if((idFromHealthStatus.equals(Integer.parseInt(&quot;${getStudentById}&quot;)))
&amp;&amp;(stuIdFromHealthStatus.equals(Integer.parseInt(&quot;${studentId}&quot;)))
&amp;&amp;(acdIdResponseFromHealthStatus.equals(Integer.parseInt(&quot;${acdId}&quot;)))
&amp;&amp;(grdIdResponseFromHealthStatus.equals(&quot;${gradeId}&quot;))
&amp;&amp;(fatherNameResponseFromHealthStatus.equals(&quot;${fatherName}&quot;))
&amp;&amp;(motherNameResponseFromHealthStatus.equals(&quot;${motherName}&quot;))
&amp;&amp;(rollnoResponseFromHealthStatus.equals(&quot;${studentNumber}&quot;))
&amp;&amp;(regnoResponseFromHealthStatus.equals(&quot;${regNo}&quot;))
&amp;&amp;(heightResponseFromHealthStatus.equals(&quot;${height}&quot;))
&amp;&amp;(weightResponseFromHealthStatus.equals(&quot;${weight}&quot;))
&amp;&amp;(bloodgroupResponseFromHealthStatus.equals(&quot;${bloodGroup}&quot;))
&amp;&amp;(visionLResponseFromHealthStatus.equals(&quot;${visionL}&quot;))
&amp;&amp;(visionRResponseFromHealthStatus.equals(&quot;${visionR}&quot;))
&amp;&amp;(dentalResponseFromHealthStatus.equals(&quot;${dental}&quot;))

)
{
	AssertionResult.setFailureMessage(&quot; Both Id  are same&quot;);
    	AssertionResult.setFailure(false); 
}

else 
 {
 	AssertionResult.setFailureMessage(&quot; Both Id  are different&quot;);
    	AssertionResult.setFailure(true);
 }
 
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsertHealthStatusStudentwithmandatoryparams(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;id&quot;: ${getStudentById},&#xd;
	&quot;stuId&quot;: ${studentId},&#xd;
	&quot;acdId&quot;: ${acdId}&#xd;
	&#xd;
	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/HealthStatus/${studentId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer idFromHealthStatus                = response.result.id;
Integer stuIdFromHealthStatus             = response.result.stuId;
Integer acdIdResponseFromHealthStatus     = response.result.acdId;
String grdIdResponseFromHealthStatus     = response.result.grdId.toString();
log.info ( &quot; value gradeid is&quot; +  grdIdResponseFromHealthStatus)

String  fatherNameResponseFromHealthStatus= response.result.fathername.toString();
String  motherNameResponseFromHealthStatus= response.result.mothername.toString();
String  rollnoResponseFromHealthStatus= response.result.rollno.toString();
String  regnoResponseFromHealthStatus= response.result.regno.toString();
String  heightResponseFromHealthStatus= response.result.height.toString();
String  weightResponseFromHealthStatus= response.result.weight.toString();
String  bloodgroupResponseFromHealthStatus= response.result.bloodgroup.toString();
String  visionLResponseFromHealthStatus= response.result.visionL.toString();
String  visionRResponseFromHealthStatus= response.result.visionR.toString();
String  dentalResponseFromHealthStatus= response.result.dental.toString();
 

log.info ( &quot; value is&quot; +  idFromHealthStatus +&quot;****************************&quot;          + &quot;${getStudentById}&quot;);
log.info ( &quot; value is&quot; +  stuIdFromHealthStatus +&quot;****************************&quot;      + &quot;${studentId}&quot;);
log.info ( &quot; value is&quot; +  acdIdResponseFromHealthStatus +&quot;****************************&quot;      + &quot;${acdId}&quot;);
log.info ( &quot; value is&quot; +  grdIdResponseFromHealthStatus + &quot;****************************&quot; + &quot;${gradeId}&quot;);
log.info ( &quot; value is&quot; +  fatherNameResponseFromHealthStatus + &quot;****************************&quot; + &quot;${fatherName}&quot;);
log.info ( &quot; value is&quot; +  motherNameResponseFromHealthStatus + &quot;****************************&quot; + &quot;${motherName}&quot;);
log.info ( &quot; value is&quot; +  rollnoResponseFromHealthStatus + &quot;****************************&quot; + &quot;${studentNumber}&quot;);
log.info ( &quot; value is&quot; +  regnoResponseFromHealthStatus + &quot;****************************&quot; + &quot;${regNo}&quot;);
log.info ( &quot; value is&quot; +  heightResponseFromHealthStatus + &quot;****************************&quot; + &quot;${height}&quot;);
log.info ( &quot; value is&quot; +  weightResponseFromHealthStatus + &quot;****************************&quot; + &quot;${weight}&quot;);
log.info ( &quot; value is&quot; +  bloodgroupResponseFromHealthStatus + &quot;****************************&quot; + &quot;${bloodGroup}&quot;);
log.info ( &quot; value is&quot; +  visionLResponseFromHealthStatus + &quot;****************************&quot; + &quot;${visionL}&quot;);
log.info ( &quot; value is&quot; +  visionRResponseFromHealthStatus + &quot;****************************&quot; + &quot;${visionR}&quot;);
log.info ( &quot; value is&quot; +  dentalResponseFromHealthStatus + &quot;****************************&quot; + &quot;${dental}&quot;);
//*************************************************************


if((idFromHealthStatus.equals(Integer.parseInt(&quot;${getStudentById}&quot;)))
&amp;&amp;(stuIdFromHealthStatus.equals(Integer.parseInt(&quot;${studentId}&quot;)))
&amp;&amp;(acdIdResponseFromHealthStatus.equals(Integer.parseInt(&quot;${acdId}&quot;)))

)
{
	AssertionResult.setFailureMessage(&quot; Both Id  are same&quot;);
    	AssertionResult.setFailure(false); 
}

else 
 {
 	AssertionResult.setFailureMessage(&quot; Both Id  are different&quot;);
    	AssertionResult.setFailure(true);
 }
 
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Associate/Disassociate/getTwinsController" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AssociateTwins(Post Request)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 ${twinsStudentId}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Student/Twins/Associate/${getStudentById}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/api/Achievement</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetTwinsByStudentAfterAssociateController" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetTwinsByStudentID Positive cases" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTwinsByStudentID(200,asssertion on passid,studentid)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Twins/${getStudentById}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonTwinsId Assertion " enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def twinsIdList = response.result.id.grep(&apos;${twinsStudentId}&apos;);
log.info (&quot;The *************************8 &quot; + response);
log.info (&quot;The *************************8 &quot; + twinsIdList + &quot; ------ &quot; + &quot;${twinsStudentId}&quot; );

for(id in twinsIdList)
{
	log.info (&quot;The *************************&quot; + id);
if (!id.equals(Integer.parseInt(&quot;${twinsStudentId}&quot;))){
		AssertionResult.setFailureMessage(&quot;The twins Id not set&quot;);
	    	AssertionResult.setFailure(true); 
	}

   else
{
AssertionResult.setFailure(false);
}

}</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentNumber" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the sibling list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the unique sibling list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both sibling ids Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="De-AssociateAchievement(Post Request)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
 ${twinsStudentId}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">phoenixMSStudent/api/Student/Twins​/DisAssociate​/${getStudentById}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">/api/Achievement</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetTwinsByStudentIDAfterDisassociate Positive cases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTwinsByStudentID(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Achievement/${getStudentByAchievementid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonStudentId Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 


def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
Integer id = response[${achievementIdResponse}].id;


if (!id.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Fail&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
AssertionResult.setFailure(false);
}

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonTwinsId Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def twinsIdList = response.result.id.grep(&apos;${twinsStudentId}&apos;);
log.info (&quot;The *************************8 &quot; + response);
log.info (&quot;The *************************8 &quot; + twinsIdList + &quot; ------ &quot; + &quot;${twinsStudentId}&quot; );

for(id in twinsIdList)
{
	log.info (&quot;The *************************&quot; + id);
if (!id.equals(Integer.parseInt(&quot;${twinsStudentId}&quot;))){
		AssertionResult.setFailureMessage(&quot;The twins Id not set&quot;);
	    	AssertionResult.setFailure(false); 
	}

   else
{
AssertionResult.setFailure(true);
}

}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Critical Detail Controller" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Edit Critical Detail Student" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Detail of Critical detail of Student by id (Critical id)Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCriticalId(Response and check Full update)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/CritcalDetail/${criticalDetailId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Change Critical Id Check Section" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer criticalIdResponse = response.result.id;
log.info (&quot;criticalID is &quot; + criticalIdResponse + &quot; ********&quot;   );

if (criticalIdResponse.equals(Integer.parseInt(&quot;${criticalDetailId}&quot;)))
{
	AssertionResult.setFailureMessage(&quot;Same Id is fetched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}


</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String stuIdResponse = response.result.id.toString();
String bsuIdResponse = response.result.bsuId.toString();
String acdIdResponse = response.result.acdId.toString();

log.info ( &quot; StudId is &quot; + stuIdResponse);
log.info ( &quot; bsuId is &quot; + bsuIdResponse);
log.info ( &quot; acdId is &quot; + acdIdResponse);

if ((!stuIdResponse.isEmpty())
&amp;&amp;(!bsuIdResponse.isEmpty())
&amp;&amp;(!bsuIdResponse.isEmpty()))

{
	AssertionResult.setFailureMessage(&quot;value are not Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not null&quot;)
     AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">GetAcdId;GetGrmId;GetGrdId;GetSctId;GetShfId;GetStmId;ToAcdId;ToGrmId;ToGrdId;ToSctId;ToShfId;ToStmId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.acdId;$.result.grmId;$.result.grdId;$.result.sctId;$.result.shfId;$.result.stmId;$.result.toAcdId;$.result.toGrmId;$.result.toGrdId;$.result.toSctId;$.result.toShfId;$.result.toStmId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1;1;1;1;1;1;1;1;1;1;1;1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;Na</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Critical Detail (Put) Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Critical detail (Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${criticalDetailId},&#xd;
  &quot;stuId&quot;: ${crticialDetailStuId},&#xd;
  &quot;bsuId&quot;: &quot;${criticalDetailBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${ToAcdId},&#xd;
  &quot;grmId&quot;: ${ToGrmId},&#xd;
  &quot;grdId&quot;: &quot;${ToGrdId}&quot;,&#xd;
  &quot;sctId&quot;: ${ToSctId},&#xd;
  &quot;shfId&quot;: ${ToShfId},&#xd;
  &quot;stmId&quot;: ${ToStmId},&#xd;
    &quot;toAcdId&quot;: ${GetAcdId},&#xd;
  &quot;toGrmId&quot;: ${GetGrmId},&#xd;
  &quot;toGrdId&quot;: &quot;${GetGrdId}&quot;,&#xd;
  &quot;toSctId&quot;: ${GetSctId},&#xd;
  &quot;toShfId&quot;: ${GetShfId},&#xd;
  &quot;toStmId&quot;: ${GetStmId},&#xd;
  &quot;doj&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;entryuser&quot;: &quot;${criticalDetailEntryUser}&quot;,&#xd;
  &quot;entryEmpId&quot;: ${criticalDetailEntryEmpId}&#xd;
  &#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/CritcalDetail/${criticalDetailId}</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ChangeLanguageOfStudent" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

Integer  stuIdResponseFromCriticalDetailPutApi = response.result.stuId;
String   bsuIdResponseFromCriticalDetailPutApi = response.result.bsuId.toString();
Integer  acdIdResponseFromCriticalDetailPutApi = response.result.acdId;
Integer  grmIdResponseFromCriticalDetailPutApi = response.result.grmId;
String   grdIdResponseFromCriticalDetailPutApi = response.result.grdId.toString();
Integer  sctIdResponseFromCriticalDetailPutApi = response.result.sctId;
Integer  shfIdResponseFromCriticalDetailPutApi = response.result.shfId;
Integer  stmIdResponseFromCriticalDetailPutApi = response.result.stmId;	
Integer  ToAcdIdResponseFromCriticalDetailPutApi = response.result.toAcdId;
Integer  ToGrmIdResponseFromCriticalDetailPutApi = response.result.toGrmId;
String   ToGrdIdResponseFromCriticalDetailPutApi = response.result.toGrdId.toString();
Integer  TosctIdResponseFromCriticalDetailPutApi = response.result.toSctId;
Integer  ToshfIdResponseFromCriticalDetailPutApi = response.result.toShfId;
Integer  TostmIdResponseFromCriticalDetailPutApi = response.result.toStmId;

log.info(stuIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${crticialDetailStuId}&quot;);
log.info(bsuIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${criticalDetailBsuId}&quot;);


log.info(acdIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${ToAcdId}&quot;);
log.info(grmIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${ToGrmId}&quot;);
log.info(grdIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${ToGrdId}&quot;);
log.info(sctIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${ToSctId}&quot;);
log.info(shfIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${ToShfId}&quot;);
log.info(stmIdResponseFromCriticalDetailPutApi   + &quot;******&quot; + &quot;${ToStmId}&quot;);
log.info(ToAcdIdResponseFromCriticalDetailPutApi + &quot;******&quot; + &quot;${GetAcdId}&quot;);
log.info(ToGrmIdResponseFromCriticalDetailPutApi + &quot;******&quot; + &quot;${GetGrmId}&quot;);
log.info(ToGrdIdResponseFromCriticalDetailPutApi + &quot;******&quot; + &quot;${GetGrdId}&quot;);
log.info(TosctIdResponseFromCriticalDetailPutApi + &quot;******&quot; + &quot;${GetSctId}&quot;);
log.info(ToshfIdResponseFromCriticalDetailPutApi + &quot;******&quot; + &quot;${GetShfId}&quot;);
log.info(TostmIdResponseFromCriticalDetailPutApi + &quot;******&quot; + &quot;${GetStmId}&quot;);
 

if ((stuIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${crticialDetailStuId}&quot;)))
&amp;&amp;(bsuIdResponseFromCriticalDetailPutApi.equals(&quot;${criticalDetailBsuId}&quot;))
&amp;&amp;(acdIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${ToAcdId}&quot;)))
&amp;&amp;(grmIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${ToGrmId}&quot;)))
&amp;&amp;(grdIdResponseFromCriticalDetailPutApi.equals(&quot;${ToGrdId}&quot;))
&amp;&amp;(sctIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${ToSctId}&quot;)))
&amp;&amp;(shfIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${ToShfId}&quot;)))
&amp;&amp;(stmIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${ToStmId}&quot;)))
&amp;&amp;(ToAcdIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${GetAcdId}&quot;)))
&amp;&amp;(ToGrmIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${GetGrmId}&quot;)))
&amp;&amp;(ToGrdIdResponseFromCriticalDetailPutApi.equals(&quot;${GetGrdId}&quot;))
&amp;&amp;(TosctIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${GetSctId}&quot;)))
&amp;&amp;(ToshfIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${GetShfId}&quot;)))
&amp;&amp;(TostmIdResponseFromCriticalDetailPutApi.equals(Integer.parseInt(&quot;${GetStmId}&quot;))))

{
	AssertionResult.setFailureMessage(&quot;Critical detail Raised Successfully&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot; Failed&quot;);
     AssertionResult.setFailure(true);
}
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Request for Critical Detail Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request for Critical Detail(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${criticalDetailId},&#xd;
  &quot;stuId&quot;: ${crticialDetailStuId},&#xd;
  &quot;bsuId&quot;: &quot;${criticalDetailBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${ToAcdId},&#xd;
  &quot;grmId&quot;: ${ToGrmId},&#xd;
  &quot;grdId&quot;: &quot;${ToGrdId}&quot;,&#xd;
  &quot;sctId&quot;: ${ToSctId},&#xd;
  &quot;shfId&quot;: ${ToShfId},&#xd;
  &quot;stmId&quot;: ${ToStmId},&#xd;
    &quot;toAcdId&quot;: ${GetAcdId},&#xd;
  &quot;toGrmId&quot;: ${GetGrmId},&#xd;
  &quot;toGrdId&quot;: &quot;${GetGrdId}&quot;,&#xd;
  &quot;toSctId&quot;: ${GetSctId},&#xd;
  &quot;toShfId&quot;: ${GetShfId},&#xd;
  &quot;toStmId&quot;: ${GetStmId},&#xd;
  &quot;doj&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;entryuser&quot;: &quot;${criticalDetailEntryUser}&quot;,&#xd;
  &quot;entryEmpId&quot;: ${criticalDetailEntryEmpId}&#xd;
  &#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/CritcalDetail </stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SearchPositiveController" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CriticalDetailofStudentByStudentNumber(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
&#xd;
  &quot;stuId&quot;: ${crticialDetailStuId}&#xd;
  &#xd;
  &#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/CritcalDetail/Search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
//log.info (&quot;Size of the list &quot; +  &quot; ********&quot; +  response );
def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CriticalDetailOfStudentBySectionId(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;secId&quot;: &quot;${sectionId}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check name" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="71346910">Javed</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStudentName" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def firstName = response.result.firstName;

for (name in firstName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CriticalDetailOfStudentByBsuId(Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;bsuId&quot;: &quot;${criticalDetailBsuId}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByCurrentStatus" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}



</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CriticalDetailOf StudentSearch (Response and check Full update)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&#xd;
{&#xd;
	 &quot;stuId&quot;: ${crticialDetailStuId},&#xd;
	&quot;secId&quot;: &quot;${sectionId}&quot;,&#xd;
	&quot;bsuId&quot;: &quot;${criticalDetailBsuId}&quot;,&#xd;
     &quot;bApproved&quot;: true,&#xd;
     &quot;bCancel&quot;: true,&#xd;
     &quot;bRejected&quot;: true&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Student/Search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def studentNumber = response.result.studentNumber;
def mySet = studentNumber.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + studentNumber.size() + &quot; ********&quot; +  studentNumber );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (studentNumber.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both StudentNumber Matched No Duplicate value present&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();
//String acdId = response.result.acdId.toString();
//String firstName = response.result.eqmApplfirstname.toString();
//String lastName = response.result.eqmAppllastname.toString();
//String middleName = response.result.eqmApplmidname.toString();
//Date date = ToDateTime(response.result.eqmAppldob.toString());

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );

//log.info (&quot;The Validation Enquiry Id is &quot; + enqId);
//log.info (&quot; Enquiry First name is  &quot; + firstName);
//log.info (&quot; Enquiry last name is  &quot; + lastName);
//log.info (&quot; Enquiry Middle name is  &quot; + middleName);
//log.info (&quot; Enquiry Dateof Birth is  &quot; + date);
//int len = firstName.length();
//log.info (&quot;Length of the string  &quot;+ len);
//if (!enqId.equals(&apos;${getEnquiryById}&apos;)){
//		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
//	    	AssertionResult.setFailure(true); 
//	}

if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PromoteStudent Controller" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Promote Student By Status Controller" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student to Pass(isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
         &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
         &quot;clmId&quot;: &quot;${clmId}&quot;,&#xd;
         &quot;acdId&quot;: ${acdId},&#xd;
         &quot;result&quot;: &quot;1&quot;,&#xd;
         &quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
         &quot;toGrdId&quot;: &quot;${togrdId}&quot;,&#xd;
         &quot;toSectionId&quot;: &quot;${tosectionId}&quot;,&#xd;
         &quot;isForceToPromote&quot;: false,&#xd;
         &quot;students&quot;: [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/Pass</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student to Pass(isForceto promotetrue)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
         &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
         &quot;clmId&quot;: &quot;${clmId}&quot;,&#xd;
         &quot;acdId&quot;: ${acdId},&#xd;
         &quot;result&quot;: &quot;1&quot;,&#xd;
         &quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
         &quot;toGrdId&quot;: &quot;${togrdId}&quot;,&#xd;
         &quot;toSectionId&quot;: &quot;${tosectionId}&quot;,&#xd;
         &quot;isForceToPromote&quot;: true,&#xd;
         &quot;students&quot;: [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/Pass</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student to fail(isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
         &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
         &quot;clmId&quot;: &quot;${clmId}&quot;,&#xd;
         &quot;acdId&quot;: ${acdId},&#xd;
         &quot;result&quot;: &quot;1&quot;,&#xd;
         &quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
         &quot;toGrdId&quot;: &quot;${togrdId}&quot;,&#xd;
         &quot;toSectionId&quot;: &quot;${tosectionId}&quot;,&#xd;
         &quot;isForceToPromote&quot;: false,&#xd;
         &quot;students&quot;: [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/Fail</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student to fail(isForceto promotetrue)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
         &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
         &quot;clmId&quot;: &quot;${clmId}&quot;,&#xd;
         &quot;acdId&quot;: ${acdId},&#xd;
         &quot;result&quot;: &quot;1&quot;,&#xd;
         &quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
         &quot;toGrdId&quot;: &quot;${togrdId}&quot;,&#xd;
         &quot;toSectionId&quot;: &quot;${tosectionId}&quot;,&#xd;
         &quot;isForceToPromote&quot;: true,&#xd;
         &quot;students&quot;: [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/Fail</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student toRestest(isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
         &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
         &quot;clmId&quot;: &quot;${clmId}&quot;,&#xd;
         &quot;acdId&quot;: ${acdId},&#xd;
         &quot;result&quot;: &quot;1&quot;,&#xd;
         &quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
         &quot;toGrdId&quot;: &quot;${togrdId}&quot;,&#xd;
         &quot;toSectionId&quot;: &quot;${tosectionId}&quot;,&#xd;
         &quot;isForceToPromote&quot;: false,&#xd;
         &quot;students&quot;: [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/Retest</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student to DoublePromote(isForceto promotetrue)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
         &quot;bsuId&quot;: &quot;${bsuId}&quot;,&#xd;
         &quot;clmId&quot;: &quot;${clmId}&quot;,&#xd;
         &quot;acdId&quot;: ${acdId},&#xd;
         &quot;result&quot;: &quot;1&quot;,&#xd;
         &quot;grdId&quot;: &quot;${gradeId}&quot;,&#xd;
         &quot;toGrdId&quot;: &quot;${togrdId}&quot;,&#xd;
         &quot;toSectionId&quot;: &quot;${tosectionId}&quot;,&#xd;
         &quot;isForceToPromote&quot;: true,&#xd;
         &quot;students&quot;: [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/DoublePromote</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Promote Student By Status and section id Controller" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student By Status(Pass) and section id  (isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
         [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/0/${sectionId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student By Status(Fail) and section id  (isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
         [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/1/${sectionId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student By Status(Retest) and section id  (isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
         [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/2/${sectionId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Promote Student By Status(DoublePromote) and section id  (isForceto promote false)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
         [&#xd;
           ${getStudentById},${getStudentByid1}&#xd;
&#xd;
         ]&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Student/Promote/3/${sectionId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cancel Promote Student  Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel Promote Student " enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${acdId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent//api/Student/Promote/Cancel/${getStudentById}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def knownName = response.result.knownName;

for (name in knownName)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Student Csv Data Set" enabled="true">
            <stringProp name="filename">${CONFIG_PATH}/csv_sheet/Student/Student.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">getStudentById,getStudentByid1,firstName,studentNumber,currentStatus,sectionId,acdId,schoolId,emergencyContact,pasprtNo,feeId,streamId,doj,gradeId,mobile,email,students,siblingId,leaveDate,dob,houseId,nationality,gender,primaryContact,bsuId,isActive,regnDate,eqmEnqid,minDOJ,acdIdJoin,gradeIdJoin,rlgId,pob,minlist,feeSponsor,isRcvspMedication,IsRcvsms,IsRcvmail,IsPromoted,IsClearance,minListType,langId,resigndate,studentId,fatherName,motherName,regNo,height,weight,bloodGroup,visionL,visionR,dental,twinsStudentId,criticalDetailId,crticialDetailStuId,criticalDetailBsuId,criticalDetailEntryUser,criticalDetailEntryEmpId,clmId,togrdId,tosectionId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GatePassApi" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Pa$$word@123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Student.M Enquiry.M Config.M Withdrawal.M</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">uatphoenix.gemseducation.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">phoenixidentityserver/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://uatphoenix.gemseducation.com/phoenixidentityserver/connect/token</stringProp>
                  <stringProp name="Authorization.username">PostmanClient</stringProp>
                  <stringProp name="Authorization.password">PostmanClient</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                  <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">String Response = prev.getResponseDataAsString();
log.info(&quot;***********&quot; + Response)

${__setProperty(access_token, ${token})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="GatePassSMTpSampler" enabled="false">
          <stringProp name="SMTPSampler.server">smtp.mailtrap.io</stringProp>
          <stringProp name="SMTPSampler.serverPort">465</stringProp>
          <stringProp name="SMTPSampler.mailFrom">gaxex56224@aprimail.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">sahil.sachdeva@tothenew.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Phoneix_Automation</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">true</stringProp>
          <stringProp name="SMTPSampler.message"></stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile">/home/sahil/Documents/jmeterfile.csv</stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">87907e8d488bdc</stringProp>
          <stringProp name="SMTPSampler.username">e61056e1221d57</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Gatepass Controller" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassByIDALLCases" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassByID not present" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassByID(valid ID not present)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass/1111111111</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;responseCode&quot;);



log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;failure&apos;)){
		AssertionResult.setFailureMessage(&quot;Assertion is wrong ID exists&quot;);
	    	AssertionResult.setFailure(true); 
	}

   </stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassByID Positive cases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassByID(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass/${gatePassById}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gatePass;studentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..gatePassID;$..studentID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1;1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found;notfound</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;gatePass&quot;);
String studentId =  vars.get(&quot;studentID&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${gatePassById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

     if (!studentId.equals(&apos;${gatePassByStudentID}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="GatePassById NegativeTestCases" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassByID negative case " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass/${GatePassById}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51508">400</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="csvDataSetforNegativeCases" enabled="true">
                  <stringProp name="filename">${CONFIG_PATH}/csv_sheet/GatePass/GatePassByIDNegativeCases.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">GatePassById</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;failure&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassStudentIdAllCases" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassStudentID not present" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassByStudentID(valid id not present)" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass/Student/20331192</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.responseCode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;responseCode&quot;);



log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;failure&apos;)){
		AssertionResult.setFailureMessage(&quot;Assertion is wrong ID exists&quot;);
	    	AssertionResult.setFailure(true); 
	}

   </stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassByStudentID Positive cases" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassByStudentID(200,asssertion on passid,studentid)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass/Student/${gatePassByStudentID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gatePass;studentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[?(@.gatePassID==&apos;${gatePassById}&apos;)].gatePassID;$.result[0].studentID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1;1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found;notfound</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;gatePass&quot;);
String studentId =  vars.get(&quot;studentID&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${gatePassById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

     if (!studentId.equals(&apos;${gatePassByStudentID}&apos;)){
		AssertionResult.setFailureMessage(&quot;The Student Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String id = response.result.gatePassID.grep(&apos;${gatePassById}&apos;).toString();
log.info (&quot;The *************************8 &quot; + response);
log.info (&quot;The *************************8 &quot; + id);

if (!id.equals(&apos;${gatePassById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

   

</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String id = response.result.gatePassID.grep(&apos;${gatePassById}&apos;).toString();
log.info (&quot;The *************************8 &quot; + response);
log.info (&quot;The *************************8 &quot; + id);

if (!id.equals(&apos;${gatePassById}&apos;)){
		AssertionResult.setFailureMessage(&quot;The gatePass Id is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

   </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="GatePassByStudentId NegativeTestCases" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassByStudentID negative case " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass/Student${GatePassByStudentId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51508">400</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">statusID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;statusID&quot;);
String studentId =  vars.get(&quot;studentID&quot;);


log.info (&quot;The example answer is &quot; + jsonString);	

	if (!jsonString.equals(&apos;400&apos;)){
		AssertionResult.setFailureMessage(&quot;Negative validation Fail&quot;);
	    	AssertionResult.setFailure(true); 
	}


	
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="csvDataSetforNegativeCases" enabled="true">
                  <stringProp name="filename">${CONFIG_PATH}/csv_sheet/GatePass/GatePassByStudentIDNegativeCases.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">GatePassByStudentId</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GatePassPostApi" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GatePassPostAPI" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/GatePass</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="GatePassMainCSV" enabled="true">
            <stringProp name="filename">${CONFIG_PATH}/csv_sheet/GatePass/gatePass.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">gatePassById,gatePassByStudentID</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EnquiryModule" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Pa$$word@123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Student.M Enquiry.M Config.M Withdrawal.M</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="HTTPArgument.content_type">x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">uatphoenix.gemseducation.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">phoenixidentityserver/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://uatphoenix.gemseducation.com/phoenixidentityserver/connect/token</stringProp>
                  <stringProp name="Authorization.username">PostmanClient</stringProp>
                  <stringProp name="Authorization.password">PostmanClient</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                  <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">String Response = prev.getResponseDataAsString();
log.info(&quot;***********&quot; + Response)

${__setProperty(access_token, ${token})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EnquiryController" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Searchenquiry(Filter) Controller" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SearchenquiryController" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByApplicantName(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;applicant_Name&quot;: &quot;${enquiryApplicantName}&quot;&#xd;
}&#xd;
  &#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="LikeCheckof name" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def eqm_applfirstname = response.result.eqm_applfirstname;


csvName = &apos;${enquiryApplicantName}&apos;;

for (name1 in eqm_applfirstname)
{
	if (name1.contains(csvName.toString()))
	{
		AssertionResult.setFailureMessage(&quot;Name is presesnt&quot;);
    	AssertionResult.setFailure(false)
	}

	else
	{
		
		AssertionResult.setFailure(true)
		
	}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1408654397">asdfds</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByEnquirynumber(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;enq_No&quot;: &quot;${Enquiryenq_No}&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String eqm_enqidResponse = response.result.eqm_enqid.toString();

log.info(&quot;value is &quot; + eqm_enqidResponse + &quot;********&quot; + &quot;${Enquiryenq_No}&quot;)

if (eqm_enqidResponse.equals(&quot;${Enquiryenq_No}&quot;)
{
	AssertionResult.setFailureMessage(&quot;Number is same&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not same&quot;)
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByAccountNb(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;acc_No&quot;: &quot;${Enquiryacc_No}&quot;&#xd;
&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String acc_NoResponse = response.result.eqm_enqid.toString();

log.info(&quot;value is &quot; + acc_NoResponse + &quot;********&quot; + &quot;${Enquiryacc_No}&quot;)

if (acc_NoResponse.equals(&quot;${Enquiryacc_No}&quot;)
{
	AssertionResult.setFailureMessage(&quot;Number is same&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not same&quot;)
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByContactMeEnable(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;contact_Me&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByNumber" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String acc_NoResponse = response.result.eqm_enqid.toString();

log.info(&quot;value is &quot; + acc_NoResponse + &quot;********&quot; + &quot;${Enquiryacc_No}&quot;)

if (acc_NoResponse.equals(&quot;${Enquiryacc_No}&quot;)
{
	AssertionResult.setFailureMessage(&quot;Number is same&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not same&quot;)
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByStatus(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;status&quot;: &quot;${Enquirystatus}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );


if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByStatus" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String statusResponse = response.result.status.toString();

log.info(&quot;value is &quot; + statusResponse + &quot;********&quot; + &quot;${Enquirystatus}&quot;)

if (acc_NoResponse.equals(&quot;${Enquirystatus}&quot;)
{
	AssertionResult.setFailureMessage(&quot;Number is same&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Number is not same&quot;)
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByfollow_Up_Status(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;follow_Up_Status&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByenq_Conditiont(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
 &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;enq_Condition&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryBypaidStatus(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
 &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;paid&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByprev_School_GEMS(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;prev_School_GEMS&quot;: &quot;${Enquiryprev_School_GEMS}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionByFeeId" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def id = response.result.id;
def mySet = id.toSet();

log.info (&quot;Size of the list &quot; + id.size() + &quot; ********&quot; +  id );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (id.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 /* if(id[0].equals(null)){

//|| bsuId.equalsIgnoreCase(&quot;&quot;)
AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}


if(id==null || id.equalsIgnoreCase(&quot;&quot;)){

AssertionResult.setFailureMessage(&quot;NO ID Found&quot;);

AssertionResult.setFailure(true);

}

else
{
AssertionResult.setFailure(false);
}*/
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="validationOnFeeId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">feeId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..feeId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationOnFeeId Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;feeId&quot;);


log.info (&quot;The FeeId is &quot; + jsonString);	

	if (!jsonString.equals(&apos;${feeId}&apos;)){
		AssertionResult.setFailureMessage(&quot;The FeeId is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}

    

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryBysenStatus(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;sen&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryBygemS_Staff(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
 &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;gemS_Staff&quot;: &quot;${EnquirygemS_Staff}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByex_Student(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;ex_Student&quot;: &quot;${Enquiryex_Student}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryBysiblingt(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
 &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;siblingt&quot;: &quot;${Enquirysiblingt}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchEnquiryByAll(Response and check Full update)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${enquiryAcdId},&#xd;
  &quot;applicant_Name&quot;: &quot;${enquiryApplicantName}&quot;,&#xd;
  &quot;enq_No&quot;: &quot;${Enquiryenq_No}&quot;,&#xd;
  &quot;acc_No&quot;: &quot;${Enquiryacc_No}&quot;,&#xd;
  &quot;contact_Me&quot;: &quot;&quot;,&#xd;
  &quot;status&quot;: &quot;${Enquirystatus}&quot;,&#xd;
  &quot;follow_Up_Status&quot;: &quot;&quot;,&#xd;
  &quot;enq_Condition&quot;: &quot;&quot;,&#xd;
  &quot;paid&quot;: &quot;&quot;,&#xd;
  &quot;prev_School_GEMS&quot;: &quot;&quot;,&#xd;
  &quot;sen&quot;: &quot;&quot;,&#xd;
  &quot;gemS_Staff&quot;: &quot;${EnquirygemS_Staff}&quot;,&#xd;
  &quot;ex_Student&quot;: &quot;${Enquiryex_Student}&quot;,&#xd;
  &quot;siblingt&quot;: &quot;${Enquirysiblingt}&quot;   &#xd;
  }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry/Search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCodeValidation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="SizeCheckAssertionById" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_enqid = response.result.eqm_enqid;
def mySet = eqm_enqid.toSet();

log.info (&quot;Size of the list &quot; + eqm_enqid.size() + &quot; ********&quot; +  eqm_enqid );
log.info (&quot;Size of the list &quot; + mySet.size() + &quot; ********&quot; +  mySet );



if (eqm_enqid.size()==mySet.size())
{
	AssertionResult.setFailureMessage(&quot;Size of Both Id Matched&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="null check " enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

def eqm_applfirstname = response.result.eqm_applfirstname;

for (name in eqm_applfirstname)
{ 
	log.info( &quot; name  is &quot; + name);
if (!name.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Name is Null&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
	AssertionResult.setFailureMessage(&quot;Name is not null&quot;)
AssertionResult.setFailure(true);
}
}
 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="LikeCheckof name" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def eqm_applfirstname = response.result.eqm_applfirstname;


csvName = &apos;${enquiryApplicantName}&apos;;

for (name1 in eqm_applfirstname)
{
	if (name1.contains(csvName.toString()))
	{
		AssertionResult.setFailureMessage(&quot;Name is presesnt&quot;);
    	AssertionResult.setFailure(false)
	}

	else
	{
		
		AssertionResult.setFailure(true)
		
	}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1408654397">asdfds</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Enquiry" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PostRequestForCreateEnquiry" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;eqmApplfirstname&quot;   : &quot;${__RandomString(7,ABCDEFGHIJKLMNOP)}&quot;,&#xd;
	&quot;eqmAppldob&quot;         : &quot;${ApplicantDob}&quot;,&#xd;
	&quot;eqmRelId&quot;           : &quot;${ApplicantReligion}&quot;,&#xd;
	&quot;eqmApplnationality&quot; : &quot;${ApplicanteqmApplnationality}&quot;,&#xd;
	&quot;eqmApplpob&quot;         : &quot;${ApplicanteqmApplpob}&quot;,&#xd;
	&quot;eqmApplcob&quot;         : &quot;${ApplicanteqmApplcob}&quot;,&#xd;
	&quot;eqmApplgender&quot;      : &quot;${ApplicanteqmApplgender}&quot;,&#xd;
     &quot;eqmEmgContact&quot;      : &quot;${__Random(1111111111,9999999999)}&quot;,&#xd;
     &quot;eqmPrimarycontact&quot;  : &quot;${ApplicanteqmPrimarycontact}&quot;,&#xd;
     &quot;eqmEnqtype&quot;         : &quot;${ApplicanteqmEnqtype}&quot;,&#xd;
     &quot;eqmPrefcontact&quot;     : &quot;${ApplicanteqmPrefcontact}&quot;,&#xd;
     &quot;eqmBPrevschoolgems&quot; : ${eqmBPrevschoolgems},&#xd;
     &quot;eqmEnqdate&quot;         : &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
     &quot;eqmBRcvsms&quot;         : ${ApplicanteqmBRcvsms},&#xd;
     &quot;eqmBRcvmail&quot;        : ${ApplicanteqmBRcvmail},&#xd;
     &quot;eqmBExstudent&quot;      : ${ApplicanteqmBExstudent},&#xd;
     &quot;eqmBApplsibling&quot;    : ${ApplicanteqmBApplsibling},&#xd;
     &quot;eqmBStaffgems&quot;      : ${ApplicanteqmBStaffgems},&#xd;
     &quot;eqsAcyId&quot;           : ${ApplicanteqsAcyId},&#xd;
     &quot;eqsAcdId&quot;           : ${enquiryAcdId},&#xd;
     &quot;eqsApplno&quot;          : 863,&#xd;
     &quot;eqsBsuId&quot;           : &quot;${enquiryBsuId}&quot;,&#xd;
     &quot;eqsGrdId&quot;           : &quot;${ApplicanteqsGrdId}&quot;,&#xd;
     &quot;eqsShfId&quot;           : ${ApplicanteqsShfId},&#xd;
     &quot;eqsClmId&quot;           : ${AapplicanteqsClmId},&#xd;
     &quot;eqsStmId&quot;           : ${ApplicanteqsStmId}&#xd;
	&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">enquiryIdFromResponse</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEnquiry" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/${enquiryIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AcdIdFromPostResponse;GradeIdFromPostResponse;ShiftIdFromResponse;StreamIdfromResponse;EqsIdFromResponse</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.eqsAcdId;$.result.eqsGrdId;$.result.eqsShfId;$.result.eqsStmId;$.result.eqsId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_Found;NOT_Found;NOT_Found;NOT_Found;NOT_Found;</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PreviousSchool " enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PostRequestForPreviousSchool" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;epsEqmEnqId&quot;: ${enquiryIdFromResponse},&#xd;
  &quot;epsId&quot;: 0,&#xd;
  &quot;schCity&quot;: &quot;string&quot;,&#xd;
  &quot;schCountry&quot;: &quot;string&quot;,&#xd;
  &quot;schId&quot;: &quot;string&quot;,&#xd;
  &quot;schName&quot;: &quot;string&quot;,&#xd;
  &quot;schHead&quot;: &quot;string&quot;,&#xd;
  &quot;schFeeId&quot;: &quot;string&quot;,&#xd;
  &quot;schGrade&quot;: &quot;string&quot;,&#xd;
  &quot;schLearnIns&quot;: &quot;string&quot;,&#xd;
  &quot;schAddr&quot;: &quot;string&quot;,&#xd;
  &quot;schCurr&quot;: 0,&#xd;
  &quot;schPhone&quot;: &quot;string&quot;,&#xd;
  &quot;schFax&quot;: &quot;string&quot;,&#xd;
  &quot;schFromdt&quot;: &quot;2020-07-18T15:39:33.270Z&quot;,&#xd;
  &quot;schTodt&quot;: &quot;2020-07-18T15:39:33.270Z&quot;,&#xd;
  &quot;schType&quot;: &quot;string&quot;,&#xd;
  &quot;epsbGemsSchool&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/qa_microservicestudent/api/Enquiry/PrevSchool/${enquiryIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">enquiryIdFromResponse</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateRequestForPreviousSchool" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;epsEqmEnqId&quot;*: 0,&#xd;
  &quot;epsId&quot;: 0,&#xd;
  &quot;schCity&quot;: &quot;string&quot;,&#xd;
  &quot;schCountry&quot;: &quot;string&quot;,&#xd;
  &quot;schId&quot;: &quot;string&quot;,&#xd;
  &quot;schName&quot;: &quot;string&quot;,&#xd;
  &quot;schHead&quot;: &quot;string&quot;,&#xd;
  &quot;schFeeId&quot;: &quot;string&quot;,&#xd;
  &quot;schGrade&quot;: &quot;string&quot;,&#xd;
  &quot;schLearnIns&quot;: &quot;string&quot;,&#xd;
  &quot;schAddr&quot;: &quot;string&quot;,&#xd;
  &quot;schCurr&quot;: 0,&#xd;
  &quot;schPhone&quot;: &quot;string&quot;,&#xd;
  &quot;schFax&quot;: &quot;string&quot;,&#xd;
  &quot;schFromdt&quot;: &quot;2020-07-18T15:39:33.270Z&quot;,&#xd;
  &quot;schTodt&quot;: &quot;2020-07-18T15:39:33.270Z&quot;,&#xd;
  &quot;schType&quot;: &quot;string&quot;,&#xd;
  &quot;epsbGemsSchool&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/qa_microservicestudent/api/Enquiry/PrevSchool/${enquiryIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">enquiryIdFromResponse</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEnquiryforPreviousSchool" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/qa_microservicestudent/api/Enquiry/PrevSchool/${enquiryIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AcdIdFromPostResponse;GradeIdFromPostResponse;ShiftIdFromResponse;StreamIdfromResponse;EqsIdFromResponse</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.eqsAcdId;$.result.eqsGrdId;$.result.eqsShfId;$.result.eqsStmId;$.result.eqsId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_Found;NOT_Found;NOT_Found;NOT_Found;NOT_Found;</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Enquiry" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ChangeEnquiryDetails" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;bsuId&quot;: &quot;${enquiryBsuId}&quot;,&#xd;
  &quot;acdId&quot;: ${AcdIdFromPostResponse},&#xd;
  &quot;grade&quot;: &quot;${GradeIdFromPostResponse}&quot;,&#xd;
  &quot;shift&quot;: &quot;${ShiftIdFromResponse}&quot;,&#xd;
  &quot;stream&quot;: &quot;${StreamIdfromResponse}&quot;,&#xd;
  &quot;eqsid&quot;: &quot;${EqsIdFromResponse}&quot;,&#xd;
  &quot;eqs_eqm_eqnid&quot;: &quot;${enquiryIdFromResponse}&quot;,&#xd;
  &quot;acdid_change&quot;: &quot;${ChangeAcdId}&quot;,&#xd;
  &quot;grade_change&quot;: &quot;${ChangeGradeId}&quot;,&#xd;
  &quot;shift_change&quot;:   &quot;${ChangeShiftId}&quot;,&#xd;
  &quot;stream_change&quot;: &quot;${ChangeStream}&quot;,&#xd;
  &quot;eqsuser&quot;: &quot;dev_guest&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/ChangeEnquiryDetails/${EqsIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer Enquiry" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferEnquiryRequest" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
      &quot;eqS_TRANSFER_TO_BSU_ID&quot;: &quot;${TransferBsuId}&quot;,&#xd;
      &quot;eqS_bTRANSFERACCEPT&quot;: &quot;Request&quot;,&#xd;
      &quot;eqs_ID&quot;: ${EqsIdFromResponse},&#xd;
      &quot;eqS_TRANSFER_DATE&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
      &quot;eqS_TRANSFER_REMARKS&quot;: &quot;string&quot;,&#xd;
}      </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Transfer/${EqsIdFromResponse}/Request</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTransferbySchool Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/GetTransferbySchool/${TransferBsuId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ClmTransferId;eqsTransferId;eqsTreQD;eqsLocId;eqS_SBL_ID;eqS_PNT_ID;eqS_TPTREMARKS</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].clM_TRANSFERID;$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].eqS_SHF_TRANSFERID;$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].eqS_bTPTREQD;$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].eqS_LOC_ID;$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].eqS_SBL_ID;$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].eqS_PNT_ID;$.result[?(@.eqS_ID==&apos;${EqsIdFromResponse}&apos;)].eqS_TPTREMARKS</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1;1;1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_Found;NOT_Found;NOT_Found;NOT_Found;NOT_Found;NOT_Found;NOT_Found</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferEnquiryAccept" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
      &quot;eqS_TRANSFER_TO_BSU_ID&quot;: &quot;${TransferBsuId}&quot;,&#xd;
      &quot;eqS_bTRANSFERACCEPT&quot;: &quot;Accept&quot;,&#xd;
      &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
      &quot;eqS_ACY_ID&quot;: ${TransfereqS_ACY_ID},&#xd;
      &quot;clM_TRANSFERID&quot;: &quot;${ClmTransferId}&quot;,&#xd;
      &quot;eqS_SHF_TRANSFERID&quot;:&quot;${eqsTransferId}&quot;,&#xd;
      &quot;eqS_bTPTREQD&quot;: &quot;${eqsTreQD}&quot;,&#xd;
      &quot;eqS_LOC_ID&quot;: &quot;${eqsLocId}&quot;,&#xd;
      &quot;eqS_SBL_ID&quot;: &quot;${eqS_SBL_ID}&quot;,&#xd;
      &quot;eqS_PNT_ID&quot;: &quot;${eqS_PNT_ID}&quot;,&#xd;
      &quot;eqS_TPTREMARKS&quot;: &quot;${eqS_TPTREMARKS}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Transfer/${EqsIdFromResponse}/Accept</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferEnquiryReject" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
      &quot;eqS_ID&quot;: ${EqsIdFromResponse}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Transfer/${EqsIdFromResponse}/Reject</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Action and followup Enquiry" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FollowUp Enquiry (Creating a followup) " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
      &quot;folBsuId&quot;: &quot;${TransferBsuId}&quot;,&#xd;
      &quot;folEnqId&quot; : &quot;${enquiryIdFromResponse}&quot;,&#xd;
      &quot;folEqsId&quot; : &quot;${EqsIdFromResponse}&quot;,&#xd;
      &quot;folUserId&quot; : &quot;${usrIdEnquiry}&quot;,&#xd;
      &quot;folMode&quot; : &quot;${folMode}&quot;&#xd;
      &quot;folFollUpDate&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;folAlertDays&quot;: ${folAlertDays},&#xd;
  &quot;folRemarks&quot;: &quot;stundent waiting test &quot;,&#xd;
  &quot;alertDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
  &quot;alertSent&quot;: 0&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/FollowUp/${enquiryIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EnquiryFollowUpGetAPIRequest" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/FollowUp/${enquiryIdFromResponse}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Null check Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String nullCheck = response.result.toString();

if (!nullCheck.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
AssertionResult.setFailure(false);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="JoinDocumentEnquiry" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetJoinDocument" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Joindocuments/${JoinDocumentId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">DocumentdceId;DocumentdceEqsId;DocumentdceAcdId;DocumentdceStgId;DocumentdceStgOrder;DocumentdceDocId;DocumentdceType;DocumentdceCopies;DocumentdceApplyto;DocumentdceBComplete;DocumentdceDate;DocumentdceBProceed</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.dceId;$.result.dceEqsId;$.result.dceAcdId;$.result.dceStgId;$.result.dceStgOrder;$.result.dceDocId;$.result.dceType;$.result.dceCopies;$.result.dceApplyto;$.result.dceBComplete;$.result.dceDate;$.result.dceBProceed </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1;1;1;1;1;1;1;1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateJoinDocument" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;dceId&quot;: &quot;${DocumentdceId}&quot;,&#xd;
  &quot;dceEqsId&quot;: ${DocumentdceEqsId},&#xd;
  &quot;dceAcdId&quot;: ${DocumentdceAcdId},&#xd;
  &quot;dceStgId&quot;: ${DocumentdceStgId},&#xd;
  &quot;dceStgOrder&quot;: ${DocumentdceStgOrder},&#xd;
  &quot;dceDocId&quot;: ${DocumentdceDocId},&#xd;
  &quot;dceType&quot;: &quot;${DocumentdceType}&quot;,&#xd;
  &quot;dceCopies&quot;: ${DocumentdceCopies},&#xd;
  &quot;dceApplyto&quot;: &quot;${DocumentdceApplyto}&quot;,&#xd;
  &quot;dceBComplete&quot;: ${DocumentdceBComplete},&#xd;
  &quot;dceDate&quot;: &quot;${DocumentdceDate}&quot;,&#xd;
  &quot;dceBProceed&quot;: ${DocumentdceBProceed}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Joindocuments/${DocumentdceEqsId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ManageEnquiryFlow Controller" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create &amp; Get Enquiry" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PostRequestForCreateEnquiry" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;eqmApplfirstname&quot;   : &quot;${__RandomString(7,ABCDEFGHIJKLMNOP)}&quot;,&#xd;
	&quot;eqmAppldob&quot;         : &quot;${ApplicantDob}&quot;,&#xd;
	&quot;eqmRelId&quot;           : &quot;${ApplicantReligion}&quot;,&#xd;
	&quot;eqmApplnationality&quot; : &quot;${ApplicanteqmApplnationality}&quot;,&#xd;
	&quot;eqmApplpob&quot;         : &quot;${ApplicanteqmApplpob}&quot;,&#xd;
	&quot;eqmApplcob&quot;         : &quot;${ApplicanteqmApplcob}&quot;,&#xd;
	&quot;eqmApplgender&quot;      : &quot;${ApplicanteqmApplgender}&quot;,&#xd;
     &quot;eqmEmgContact&quot;      : &quot;${__Random(1111111111,9999999999)}&quot;,&#xd;
     &quot;eqmPrimarycontact&quot;  : &quot;${ApplicanteqmPrimarycontact}&quot;,&#xd;
     &quot;eqmEnqtype&quot;         : &quot;${ApplicanteqmEnqtype}&quot;,&#xd;
     &quot;eqmPrefcontact&quot;     : &quot;${ApplicanteqmPrefcontact}&quot;,&#xd;
     &quot;eqmBPrevschoolgems&quot; : ${eqmBPrevschoolgems},&#xd;
     &quot;eqmEnqdate&quot;         : &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
     &quot;eqmBRcvsms&quot;         : ${ApplicanteqmBRcvsms},&#xd;
     &quot;eqmBRcvmail&quot;        : ${ApplicanteqmBRcvmail},&#xd;
     &quot;eqmBExstudent&quot;      : ${ApplicanteqmBExstudent},&#xd;
     &quot;eqmBApplsibling&quot;    : ${ApplicanteqmBApplsibling},&#xd;
     &quot;eqmBStaffgems&quot;      : ${ApplicanteqmBStaffgems},&#xd;
     &quot;eqsAcyId&quot;           : ${ApplicanteqsAcyId},&#xd;
     &quot;eqsAcdId&quot;           : ${enquiryAcdId},&#xd;
     &quot;eqsApplno&quot;          : 863,&#xd;
     &quot;eqsBsuId&quot;           : &quot;${enquiryBsuId}&quot;,&#xd;
     &quot;eqsGrdId&quot;           : &quot;${ApplicanteqsGrdId}&quot;,&#xd;
     &quot;eqsShfId&quot;           : ${ApplicanteqsShfId},&#xd;
     &quot;eqsClmId&quot;           : ${AapplicanteqsClmId},&#xd;
     &quot;eqsStmId&quot;           : ${ApplicanteqsStmId}&#xd;
	&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/API/Enquiry</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">enquiryIdFromResponse</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Edit Enquiry Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEnquiry Request" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/${enquiryIdFromResponse}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">applicationFirstNameResponseManageEnquiry;appDobResponseManageEnquiry;relationIdResponseManageEnquiry;applicantNationalityResponseManageEnquiry;applicationPlaceOfBirthResponseManageEnquiry;applicationPlaceOfCountryResponseManageEnquiry;primaryContactRequiredResponseManageEnquiry;preferedContactResponseManageEnquiry;enqTypeResponseManageEnquiry;emergencyContactResponseManageEnquiry ;applicationGenderResponseManageEnquiry;previousSchoolGemsResponseManageEnquiry;enquiryDateResponseManageEnquiry;BRcvsmsResponseManageEnquiry;BRcvmailResponseManageEnquiry;BExstudentResponseManageEnquiry;applicationSiblingResponseManageEnquiry;BStaffgemsResponseManageEnquiry;AcyIdResponseManageEnquiry;ApplnoResponseManageEnquiry;BsuIdResponseManageEnquiry;GrdIdResponseManageEnquiry;ShiftIdResponseManageEnquiry;StreamIdResponseManageEnquiry;BTptreqdResponseManageEnquiry;registrationResponseManageenquiry </stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..eqmApplfirstname;$..eqmAppldob;$..eqmRelId;$..eqmApplnationality;$..eqmApplpob;$..eqmApplcob;$..eqmPrimarycontact;$..eqmPrefcontact;$..eqmEnqtype;$..eqmEmgContact;$..eqmApplgender;$..eqmBPrevschoolgems;$..eqmEnqdate;$..eqmBRcvsms;$..eqmBRcvmail;$..eqmBExstudent;$..eqmBApplsibling;$..eqmBStaffgems;$..eqsAcyId;$..eqsApplno;$..eqsBsuId;$..eqsGrdId;$..eqsShfId;$..eqsStmId;$..eqsBTptreqd;$..eqsReg  </stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit Enquiry-Put API Enquiry Request" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;eqmEnqid&quot; : &quot;${enquiryIdFromResponse}&quot;,&#xd;
    &quot;eqmApplfirstname&quot;: &quot;${applicationFirstNameResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmAppldob&quot;: &quot;${appDobResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmRelId&quot;: &quot;${relationIdResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmApplnationality&quot;: &quot;${applicantNationalityResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmApplpob&quot;: &quot;${applicationPlaceOfBirthResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmApplcob&quot;: &quot;${applicationPlaceOfCountryResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmPrimarycontact&quot;: &quot;${primaryContactRequiredResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmPrefcontact&quot;: &quot;${preferedContactResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmEnqtype&quot;: &quot;${enqTypeResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmEmgContact&quot;: &quot;${emergencyContactResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmApplgender&quot;: &quot;${applicationGenderResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmBPrevschoolgems&quot;: ${previousSchoolGemsResponseManageEnquiry},&#xd;
    &quot;eqmEnqdate&quot;: &quot;${enquiryDateResponseManageEnquiry}&quot;,&#xd;
    &quot;eqmBRcvsms&quot;: ${BRcvsmsResponseManageEnquiry},&#xd;
    &quot;eqmBRcvmail&quot;: ${BRcvmailResponseManageEnquiry},&#xd;
    &quot;eqmBExstudent&quot;: ${BExstudentResponseManageEnquiry},&#xd;
    &quot;eqmBApplsibling&quot;: ${applicationSiblingResponseManageEnquiry},&#xd;
    &quot;eqmBStaffgems&quot;: ${BStaffgemsResponseManageEnquiry},&#xd;
    &quot;eqsAcyId&quot;: ${AcyIdResponseManageEnquiry},&#xd;
    &quot;eqsApplno&quot;: ${ApplnoResponseManageEnquiry},&#xd;
    &quot;eqsBsuId&quot;: &quot;${BsuIdResponseManageEnquiry}&quot;,&#xd;
    &quot;eqsGrdId&quot;: &quot;${GrdIdResponseManageEnquiry}&quot;,&#xd;
    &quot;eqsShfId&quot;: ${ShiftIdResponseManageEnquiry},&#xd;
    &quot;eqsStmId&quot;: ${StreamIdResponseManageEnquiry},&#xd;
    &quot;eqsBTptreqd&quot;: ${BTptreqdResponseManageEnquiry},&#xd;
    &quot;eqsClmId&quot;: &quot;1&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/${enquiryIdFromResponse}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit Enquiry-Patch API Enquiry Request" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{ &quot;eqmPrefcontact&quot;     : &quot;Email2&quot;,&#xd;
  &quot;eqsClmId&quot;           : 1&#xd;
 }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/${enquiryIdFromResponse}</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">preferenceContactFromResponse</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..eqmPrefcontact</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="validationonChangedPreferContact Assertion " enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String jsonString =  vars.get(&quot;preferenceContactFromResponse&quot;);



log.info (&quot;The ChnagedPrefer Contact check &quot; + jsonString);	

	if (!jsonString.equals(&apos;Email2&apos;)){
		AssertionResult.setFailureMessage(&quot;The AChnagedPrefer not present&quot;);
	    	AssertionResult.setFailure(true); 
	}

    else 

    {
    		AssertionResult.setFailure(false);
    }

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ActionOnManageEnquiry Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Shortlist Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Shortlist Enquiry Request" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;eqS_ACD_ID&quot;:${enquiryAcdId} &#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/SHO/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Registration Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Registration Enquiry Request" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;eqS_ACD_ID&quot;: ${enquiryAcdId},&#xd;
   &quot;eqS_REG&quot;: &quot;${registrationResponseManageenquiry}&quot;,&#xd;
   &quot;eqS_REGNDATE&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
   &quot;eqS_ACCNO&quot;: &quot;${Enquiryacc_No}&quot;,&#xd;
   &quot;eqS_bALLERGIES&quot;: true,&#xd;
   &quot;eqS_ALLERGIES&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bRCVSPMEDICATION&quot;: true,&#xd;
   &quot;eqS_SPMEDICN&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bPRESTRICTIONS&quot;: true,&#xd;
   &quot;eqS_PRESTRICTIONS&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bHRESTRICTIONS&quot;: true,&#xd;
   &quot;eqS_HRESTRICTIONS&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bTHERAPHY&quot;: true,&#xd;
   &quot;eqS_THERAPHY&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bSEN&quot;: true,&#xd;
   &quot;eqS_SEN&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bEAL&quot;: true,&#xd;
   &quot;eqS_EAL&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bMUSICAL&quot;: true,&#xd;
   &quot;eqS_MUSICAL&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bENRICH&quot;: true,&#xd;
   &quot;eqS_ENRICH&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bBEHAVIOUR&quot;: true,&#xd;
   &quot;eqS_BEHAVIOUR&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bSPORTS&quot;: true,&#xd;
   &quot;eqS_SPORTS&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bCommInt&quot;: true,&#xd;
   &quot;eqS_CommInt&quot;: &quot;0&quot;,&#xd;
   &quot;eqS_bDisabled&quot;: true,&#xd;
   &quot;eqS_Disabled&quot;: &quot;0&quot;,&#xd;
   &quot;usR_ID&quot;: &quot;${usrIdEnquiry}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/REG/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Screening Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Screening Enquiry Controller" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;apR_ID&quot;: 1,&#xd;
   &quot;apR_DISABLE&quot;: true,&#xd;
   &quot;chK_PRINT&quot;: true,&#xd;
   &quot;date&quot;: &quot;${enquiryDateResponseManageEnquiry}&quot;,&#xd;
   &quot;scR_TEST_DATE&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
   &quot;scR_TEST_TIME&quot;: &quot;${__time(hh:mm:ss)}&quot;,&#xd;
   &quot;details&quot;: &quot;string&quot;,&#xd;
   &quot;delimitedStr&quot;: &quot;string&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/SCR/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Approval Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approval Enquiry Controller" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;apR_ID&quot;: 0,&#xd;
   &quot;apR_DISABLE&quot;: true,&#xd;
   &quot;chK_PRINT&quot;: true,&#xd;
   &quot;date&quot;: &quot;${enquiryDateResponseManageEnquiry}&quot;,&#xd;
   &quot;scR_TEST_DATE&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
   &quot;scR_TEST_TIME&quot;: &quot;${__time(hh:mm:ss)}&quot;,&#xd;
   &quot;details&quot;: &quot;string&quot;,&#xd;
   &quot;delimitedStr&quot;: &quot;string&quot;&#xd;
&#xd;
  }&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/SCR/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OfferLetter Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OfferLetter Enquiry Controller" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
}&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/OFR/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OfferLetter Print Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OfferLetter Print Enquiry Controller" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;usR_ID&quot;: &quot;${usrIdEnquiry}&quot;,&#xd;
   &quot;eqS_BSU_ID&quot; : &quot;${BsuIdResponseManageEnquiry}&quot;,&#xd;
   &quot;eqS_OFR_DOJ&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
   &quot;eqS_OFR_LDATE&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
   &quot;eqS_EXTRADOC&quot;: &quot;2&quot;,&#xd;
   &quot;eqS_OFR_TYPE&quot;: &quot;2&quot;&#xd;
   }&#xd;
&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/OFRP/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Enquiry Enrollment Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Enquiry Enrollment Controller" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;usR_ID&quot;: &quot;${usrIdEnquiry}&quot;,&#xd;
   &quot;eqS_BSU_ID&quot; : &quot;${BsuIdResponseManageEnquiry}&quot;,&#xd;
    &quot;stU_DOJ&quot; : &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
   &quot;stU_MINDOJ&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;,&#xd;
    &quot;stU_TFRTYPE&quot;: &quot;2&quot;,&#xd;
   &quot;payplan&quot;: 2,&#xd;
   &quot;prevresult&quot;: &quot;string&quot;&#xd;
   }&#xd;
 &#xd;
  &#xd;
   </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/ENR/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Enquiry Document Enquiry Controller" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Enquiry Document Enquiry Controller" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{  &#xd;
   &quot;eqmEnqid&quot;: ${enquiryIdFromResponse},&#xd;
   &quot;eqS_ID&quot;: ${EqsIdFromResponse},&#xd;
   &quot;uploadId&quot;: &quot;1234&quot;,&#xd;
   &quot;option&quot;: 0,&#xd;
   &quot;eqmDocId&quot;: 22,&#xd;
   &quot;filename&quot;: &quot;Passsss&quot;,&#xd;
   &quot;extension&quot;: &quot;aaaaa&quot;&#xd;
   }&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/phoenixMSStudent/api/Enquiry/Action/DOC/${enquiryIdFromResponse}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Enquiry CSv Data Set" enabled="true">
            <stringProp name="filename">${CONFIG_PATH}/csv_sheet/EnquiryPass/Enquiry.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">getEnquiryById,enquiryBsuId,enquiryAcdId,enquiryApplicantName,Enquiryenq_No,Enquiryacc_No,Enquirycontact_Me,Enquirystatus,Enquiryfollow_Up_Status,Enquiryenq_Condition,Enquirypaid,Enquiryprev_School_GEMS,Enquirysen,EnquirygemS_Staff,Enquiryex_Student,Enquirysiblingt,ApplicantDob,ApplicantReligion,ApplicanteqmApplnationality,ApplicanteqmApplpob,ApplicanteqmApplcob,ApplicanteqmApplgender,ApplicanteqmPrimarycontact,ApplicanteqmEnqtype,ApplicanteqmPrefcontact,eqmBPrevschoolgems,ApplicanteqmBRcvsms,ApplicanteqmBRcvmail,ApplicanteqmBExstudent,ApplicanteqmBApplsibling,ApplicanteqmBStaffgems,ApplicanteqsAcyId,ApplicanteqsGrdId,ApplicanteqsShfId,AapplicanteqsClmId,ApplicanteqsStmId,ChangeAcdId,ChangeGradeId,ChangeShiftId,ChangeStream,TransferBsuId,TransfereqS_ACY_ID,JoinDocumentId,usrIdEnquiry,folMode,folAlertDays</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Configuration" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="JoinDocumentConfiguration" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BSUStageMasterRequest" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
     &quot;PrbBsuId&quot;: &quot;300001&quot;,&#xd;
     &quot;PrbAcdId&quot;: 1532,&#xd;
     &quot;PrbStgId&quot;: 12,&#xd;
     &quot;PrbBRequired&quot;: true,&#xd;
     &quot;PrbStgOrder&quot;:1&#xd;
}  </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="ResponseCodeMessageAssertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String responseCodeMessage = response.responseCode.toString();

if (responseCodeMessage.equals(&quot;success&quot;))
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(false); 
}
else
{
AssertionResult.setFailure(true);
}

 </stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Null check Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 
import java.util.Date

def jsonSlurper = new JsonSlurper();

def response = jsonSlurper.parseText(prev.getResponseDataAsString());

String nullCheck = response.result.toString();

if (!nullCheck.isEmpty())
{
	AssertionResult.setFailureMessage(&quot;Pass&quot;);
    	AssertionResult.setFailure(true); 
}
else
{
AssertionResult.setFailure(false);
}

 </stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname=" Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="PageSize" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">true</boolProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
              <stringProp name="Argument.name">PageSize</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">uatphoenix.gemseducation.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname=" Request Defaults" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="PageSize" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">true</boolProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
              <stringProp name="Argument.name">PageSize</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">qaphoenix.gemseducation.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Reporting" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="CONFIG_PATH" elementType="Argument">
            <stringProp name="Argument.name">CONFIG_PATH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
